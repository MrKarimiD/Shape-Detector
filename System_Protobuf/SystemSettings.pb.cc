// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SystemSettings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SystemSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemSettings_color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemSettings_color_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SystemSettings_2eproto() {
  protobuf_AddDesc_SystemSettings_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SystemSettings.proto");
  GOOGLE_CHECK(file != NULL);
  SystemSettings_descriptor_ = file->message_type(0);
  static const int SystemSettings_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, input_edit_camera_setting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, input_white_balance_blue_u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, input_white_balance_red_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, input_exposure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, input_brightness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, input_sharpness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, input_gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, input_network_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, input_network_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, filters_crop_photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, filters_crop_firstpoint_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, filters_crop_firstpoint_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, filters_crop_secondpoint_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, filters_crop_secondpoint_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, filters_median_blur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, filters_median_blur_kernelsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, filters_adaptive_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, filters_adaptive_threshold_blocksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, filters_adaptive_threshold_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, filters_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, filters_threshold_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, filters_dilate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, filters_dilationsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, filters_canny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, filters_canny_first_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, filters_canny_second_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, filters_canny_aperturesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, have_red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, red_instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, have_blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, blue_instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, have_green_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, green_instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, have_yellow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, yellow_instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, have_violet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, violet_instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, have_cyan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, cyan_instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, have_black_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, black_instances_),
  };
  SystemSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemSettings_descriptor_,
      SystemSettings::default_instance_,
      SystemSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemSettings));
  SystemSettings_color_descriptor_ = SystemSettings_descriptor_->nested_type(0);
  static const int SystemSettings_color_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings_color, min_hue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings_color, max_hue_),
  };
  SystemSettings_color_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemSettings_color_descriptor_,
      SystemSettings_color::default_instance_,
      SystemSettings_color_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings_color, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemSettings_color, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemSettings_color));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SystemSettings_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemSettings_descriptor_, &SystemSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemSettings_color_descriptor_, &SystemSettings_color::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SystemSettings_2eproto() {
  delete SystemSettings::default_instance_;
  delete SystemSettings_reflection_;
  delete SystemSettings_color::default_instance_;
  delete SystemSettings_color_reflection_;
}

void protobuf_AddDesc_SystemSettings_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024SystemSettings.proto\"\365\n\n\016SystemSetting"
    "s\022!\n\031input_edit_camera_setting\030\001 \002(\010\022\"\n\032"
    "input_WHITE_BALANCE_BLUE_U\030\002 \002(\003\022!\n\031inpu"
    "t_WHITE_BALANCE_RED_V\030\003 \002(\003\022\026\n\016input_EXP"
    "OSURE\030\004 \002(\003\022\030\n\020input_BRIGHTNESS\030\005 \002(\003\022\027\n"
    "\017input_SHARPNESS\030\006 \002(\005\022\022\n\ninput_GAIN\030\007 \002"
    "(\003\022\030\n\020input_network_ip\030\010 \002(\t\022\032\n\022input_ne"
    "twork_port\030\t \002(\t\022\032\n\022filters_crop_photo\030\n"
    " \002(\010\022!\n\031filters_crop_firstPoint_x\030\013 \002(\t\022"
    "!\n\031filters_crop_firstPoint_y\030\014 \002(\t\022\"\n\032fi"
    "lters_crop_secondPoint_x\030\r \002(\t\022\"\n\032filter"
    "s_crop_secondPoint_y\030\016 \002(\t\022\033\n\023filters_me"
    "dian_blur\030\017 \002(\010\022&\n\036filters_median_blur_k"
    "ernelSize\030\020 \002(\t\022\"\n\032filters_Adaptive_thre"
    "shold\030\021 \002(\010\022,\n$filters_Adaptive_threshol"
    "d_blockSize\030\022 \002(\003\022$\n\034filters_Adaptive_th"
    "reshold_C\030\023 \002(\003\022\031\n\021filters_Threshold\030\024 \002"
    "(\010\022\037\n\027filters_Threshold_value\030\025 \002(\003\022\026\n\016f"
    "ilters_dilate\030\026 \002(\010\022\034\n\024filters_dilationS"
    "ize\030\027 \002(\t\022\025\n\rfilters_Canny\030\030 \002(\010\022%\n\035filt"
    "ers_Canny_First_Threshold\030\031 \002(\003\022&\n\036filte"
    "rs_Canny_Second_Threshold\030\032 \002(\003\022\"\n\032filte"
    "rs_Canny_apertureSize\030\033 \002(\t\022\020\n\010have_red\030"
    "\034 \002(\010\022,\n\rred_instances\030\035 \003(\0132\025.SystemSet"
    "tings.color\022\021\n\thave_blue\030\036 \002(\010\022-\n\016blue_i"
    "nstances\030\037 \003(\0132\025.SystemSettings.color\022\022\n"
    "\nhave_green\030  \002(\010\022.\n\017green_instances\030! \003"
    "(\0132\025.SystemSettings.color\022\023\n\013have_yellow"
    "\030\" \002(\010\022/\n\020yellow_instances\030# \003(\0132\025.Syste"
    "mSettings.color\022\023\n\013have_violet\030$ \002(\010\022/\n\020"
    "violet_instances\030% \003(\0132\025.SystemSettings."
    "color\022\021\n\thave_cyan\030& \002(\010\022-\n\016cyan_instanc"
    "es\030\' \003(\0132\025.SystemSettings.color\022\022\n\nhave_"
    "black\030) \002(\010\022.\n\017black_instances\030* \003(\0132\025.S"
    "ystemSettings.color\032)\n\005color\022\017\n\007min_hue\030"
    "\001 \002(\002\022\017\n\007max_hue\030\002 \002(\002", 1422);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SystemSettings.proto", &protobuf_RegisterTypes);
  SystemSettings::default_instance_ = new SystemSettings();
  SystemSettings_color::default_instance_ = new SystemSettings_color();
  SystemSettings::default_instance_->InitAsDefaultInstance();
  SystemSettings_color::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SystemSettings_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SystemSettings_2eproto {
  StaticDescriptorInitializer_SystemSettings_2eproto() {
    protobuf_AddDesc_SystemSettings_2eproto();
  }
} static_descriptor_initializer_SystemSettings_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SystemSettings_color::kMinHueFieldNumber;
const int SystemSettings_color::kMaxHueFieldNumber;
#endif  // !_MSC_VER

SystemSettings_color::SystemSettings_color()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemSettings_color::InitAsDefaultInstance() {
}

SystemSettings_color::SystemSettings_color(const SystemSettings_color& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemSettings_color::SharedCtor() {
  _cached_size_ = 0;
  min_hue_ = 0;
  max_hue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemSettings_color::~SystemSettings_color() {
  SharedDtor();
}

void SystemSettings_color::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SystemSettings_color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemSettings_color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemSettings_color_descriptor_;
}

const SystemSettings_color& SystemSettings_color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemSettings_2eproto();  return *default_instance_;
}

SystemSettings_color* SystemSettings_color::default_instance_ = NULL;

SystemSettings_color* SystemSettings_color::New() const {
  return new SystemSettings_color;
}

void SystemSettings_color::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    min_hue_ = 0;
    max_hue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemSettings_color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float min_hue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_hue_)));
          set_has_min_hue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_max_hue;
        break;
      }
      
      // required float max_hue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_hue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_hue_)));
          set_has_max_hue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemSettings_color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float min_hue = 1;
  if (has_min_hue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_hue(), output);
  }
  
  // required float max_hue = 2;
  if (has_max_hue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_hue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemSettings_color::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float min_hue = 1;
  if (has_min_hue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_hue(), target);
  }
  
  // required float max_hue = 2;
  if (has_max_hue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_hue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemSettings_color::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float min_hue = 1;
    if (has_min_hue()) {
      total_size += 1 + 4;
    }
    
    // required float max_hue = 2;
    if (has_max_hue()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemSettings_color::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemSettings_color* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemSettings_color*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemSettings_color::MergeFrom(const SystemSettings_color& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_hue()) {
      set_min_hue(from.min_hue());
    }
    if (from.has_max_hue()) {
      set_max_hue(from.max_hue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemSettings_color::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemSettings_color::CopyFrom(const SystemSettings_color& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSettings_color::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SystemSettings_color::Swap(SystemSettings_color* other) {
  if (other != this) {
    std::swap(min_hue_, other->min_hue_);
    std::swap(max_hue_, other->max_hue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemSettings_color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemSettings_color_descriptor_;
  metadata.reflection = SystemSettings_color_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SystemSettings::kInputEditCameraSettingFieldNumber;
const int SystemSettings::kInputWHITEBALANCEBLUEUFieldNumber;
const int SystemSettings::kInputWHITEBALANCEREDVFieldNumber;
const int SystemSettings::kInputEXPOSUREFieldNumber;
const int SystemSettings::kInputBRIGHTNESSFieldNumber;
const int SystemSettings::kInputSHARPNESSFieldNumber;
const int SystemSettings::kInputGAINFieldNumber;
const int SystemSettings::kInputNetworkIpFieldNumber;
const int SystemSettings::kInputNetworkPortFieldNumber;
const int SystemSettings::kFiltersCropPhotoFieldNumber;
const int SystemSettings::kFiltersCropFirstPointXFieldNumber;
const int SystemSettings::kFiltersCropFirstPointYFieldNumber;
const int SystemSettings::kFiltersCropSecondPointXFieldNumber;
const int SystemSettings::kFiltersCropSecondPointYFieldNumber;
const int SystemSettings::kFiltersMedianBlurFieldNumber;
const int SystemSettings::kFiltersMedianBlurKernelSizeFieldNumber;
const int SystemSettings::kFiltersAdaptiveThresholdFieldNumber;
const int SystemSettings::kFiltersAdaptiveThresholdBlockSizeFieldNumber;
const int SystemSettings::kFiltersAdaptiveThresholdCFieldNumber;
const int SystemSettings::kFiltersThresholdFieldNumber;
const int SystemSettings::kFiltersThresholdValueFieldNumber;
const int SystemSettings::kFiltersDilateFieldNumber;
const int SystemSettings::kFiltersDilationSizeFieldNumber;
const int SystemSettings::kFiltersCannyFieldNumber;
const int SystemSettings::kFiltersCannyFirstThresholdFieldNumber;
const int SystemSettings::kFiltersCannySecondThresholdFieldNumber;
const int SystemSettings::kFiltersCannyApertureSizeFieldNumber;
const int SystemSettings::kHaveRedFieldNumber;
const int SystemSettings::kRedInstancesFieldNumber;
const int SystemSettings::kHaveBlueFieldNumber;
const int SystemSettings::kBlueInstancesFieldNumber;
const int SystemSettings::kHaveGreenFieldNumber;
const int SystemSettings::kGreenInstancesFieldNumber;
const int SystemSettings::kHaveYellowFieldNumber;
const int SystemSettings::kYellowInstancesFieldNumber;
const int SystemSettings::kHaveVioletFieldNumber;
const int SystemSettings::kVioletInstancesFieldNumber;
const int SystemSettings::kHaveCyanFieldNumber;
const int SystemSettings::kCyanInstancesFieldNumber;
const int SystemSettings::kHaveBlackFieldNumber;
const int SystemSettings::kBlackInstancesFieldNumber;
#endif  // !_MSC_VER

SystemSettings::SystemSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemSettings::InitAsDefaultInstance() {
}

SystemSettings::SystemSettings(const SystemSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemSettings::SharedCtor() {
  _cached_size_ = 0;
  input_edit_camera_setting_ = false;
  input_white_balance_blue_u_ = GOOGLE_LONGLONG(0);
  input_white_balance_red_v_ = GOOGLE_LONGLONG(0);
  input_exposure_ = GOOGLE_LONGLONG(0);
  input_brightness_ = GOOGLE_LONGLONG(0);
  input_sharpness_ = 0;
  input_gain_ = GOOGLE_LONGLONG(0);
  input_network_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  input_network_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filters_crop_photo_ = false;
  filters_crop_firstpoint_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filters_crop_firstpoint_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filters_crop_secondpoint_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filters_crop_secondpoint_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filters_median_blur_ = false;
  filters_median_blur_kernelsize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filters_adaptive_threshold_ = false;
  filters_adaptive_threshold_blocksize_ = GOOGLE_LONGLONG(0);
  filters_adaptive_threshold_c_ = GOOGLE_LONGLONG(0);
  filters_threshold_ = false;
  filters_threshold_value_ = GOOGLE_LONGLONG(0);
  filters_dilate_ = false;
  filters_dilationsize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filters_canny_ = false;
  filters_canny_first_threshold_ = GOOGLE_LONGLONG(0);
  filters_canny_second_threshold_ = GOOGLE_LONGLONG(0);
  filters_canny_aperturesize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  have_red_ = false;
  have_blue_ = false;
  have_green_ = false;
  have_yellow_ = false;
  have_violet_ = false;
  have_cyan_ = false;
  have_black_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemSettings::~SystemSettings() {
  SharedDtor();
}

void SystemSettings::SharedDtor() {
  if (input_network_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete input_network_ip_;
  }
  if (input_network_port_ != &::google::protobuf::internal::kEmptyString) {
    delete input_network_port_;
  }
  if (filters_crop_firstpoint_x_ != &::google::protobuf::internal::kEmptyString) {
    delete filters_crop_firstpoint_x_;
  }
  if (filters_crop_firstpoint_y_ != &::google::protobuf::internal::kEmptyString) {
    delete filters_crop_firstpoint_y_;
  }
  if (filters_crop_secondpoint_x_ != &::google::protobuf::internal::kEmptyString) {
    delete filters_crop_secondpoint_x_;
  }
  if (filters_crop_secondpoint_y_ != &::google::protobuf::internal::kEmptyString) {
    delete filters_crop_secondpoint_y_;
  }
  if (filters_median_blur_kernelsize_ != &::google::protobuf::internal::kEmptyString) {
    delete filters_median_blur_kernelsize_;
  }
  if (filters_dilationsize_ != &::google::protobuf::internal::kEmptyString) {
    delete filters_dilationsize_;
  }
  if (filters_canny_aperturesize_ != &::google::protobuf::internal::kEmptyString) {
    delete filters_canny_aperturesize_;
  }
  if (this != default_instance_) {
  }
}

void SystemSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemSettings_descriptor_;
}

const SystemSettings& SystemSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemSettings_2eproto();  return *default_instance_;
}

SystemSettings* SystemSettings::default_instance_ = NULL;

SystemSettings* SystemSettings::New() const {
  return new SystemSettings;
}

void SystemSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    input_edit_camera_setting_ = false;
    input_white_balance_blue_u_ = GOOGLE_LONGLONG(0);
    input_white_balance_red_v_ = GOOGLE_LONGLONG(0);
    input_exposure_ = GOOGLE_LONGLONG(0);
    input_brightness_ = GOOGLE_LONGLONG(0);
    input_sharpness_ = 0;
    input_gain_ = GOOGLE_LONGLONG(0);
    if (has_input_network_ip()) {
      if (input_network_ip_ != &::google::protobuf::internal::kEmptyString) {
        input_network_ip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_input_network_port()) {
      if (input_network_port_ != &::google::protobuf::internal::kEmptyString) {
        input_network_port_->clear();
      }
    }
    filters_crop_photo_ = false;
    if (has_filters_crop_firstpoint_x()) {
      if (filters_crop_firstpoint_x_ != &::google::protobuf::internal::kEmptyString) {
        filters_crop_firstpoint_x_->clear();
      }
    }
    if (has_filters_crop_firstpoint_y()) {
      if (filters_crop_firstpoint_y_ != &::google::protobuf::internal::kEmptyString) {
        filters_crop_firstpoint_y_->clear();
      }
    }
    if (has_filters_crop_secondpoint_x()) {
      if (filters_crop_secondpoint_x_ != &::google::protobuf::internal::kEmptyString) {
        filters_crop_secondpoint_x_->clear();
      }
    }
    if (has_filters_crop_secondpoint_y()) {
      if (filters_crop_secondpoint_y_ != &::google::protobuf::internal::kEmptyString) {
        filters_crop_secondpoint_y_->clear();
      }
    }
    filters_median_blur_ = false;
    if (has_filters_median_blur_kernelsize()) {
      if (filters_median_blur_kernelsize_ != &::google::protobuf::internal::kEmptyString) {
        filters_median_blur_kernelsize_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    filters_adaptive_threshold_ = false;
    filters_adaptive_threshold_blocksize_ = GOOGLE_LONGLONG(0);
    filters_adaptive_threshold_c_ = GOOGLE_LONGLONG(0);
    filters_threshold_ = false;
    filters_threshold_value_ = GOOGLE_LONGLONG(0);
    filters_dilate_ = false;
    if (has_filters_dilationsize()) {
      if (filters_dilationsize_ != &::google::protobuf::internal::kEmptyString) {
        filters_dilationsize_->clear();
      }
    }
    filters_canny_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    filters_canny_first_threshold_ = GOOGLE_LONGLONG(0);
    filters_canny_second_threshold_ = GOOGLE_LONGLONG(0);
    if (has_filters_canny_aperturesize()) {
      if (filters_canny_aperturesize_ != &::google::protobuf::internal::kEmptyString) {
        filters_canny_aperturesize_->clear();
      }
    }
    have_red_ = false;
    have_blue_ = false;
    have_green_ = false;
  }
  if (_has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    have_yellow_ = false;
    have_violet_ = false;
    have_cyan_ = false;
    have_black_ = false;
  }
  red_instances_.Clear();
  blue_instances_.Clear();
  green_instances_.Clear();
  yellow_instances_.Clear();
  violet_instances_.Clear();
  cyan_instances_.Clear();
  black_instances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool input_edit_camera_setting = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &input_edit_camera_setting_)));
          set_has_input_edit_camera_setting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_input_WHITE_BALANCE_BLUE_U;
        break;
      }
      
      // required int64 input_WHITE_BALANCE_BLUE_U = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_WHITE_BALANCE_BLUE_U:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &input_white_balance_blue_u_)));
          set_has_input_white_balance_blue_u();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_input_WHITE_BALANCE_RED_V;
        break;
      }
      
      // required int64 input_WHITE_BALANCE_RED_V = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_WHITE_BALANCE_RED_V:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &input_white_balance_red_v_)));
          set_has_input_white_balance_red_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_input_EXPOSURE;
        break;
      }
      
      // required int64 input_EXPOSURE = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_EXPOSURE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &input_exposure_)));
          set_has_input_exposure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_input_BRIGHTNESS;
        break;
      }
      
      // required int64 input_BRIGHTNESS = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_BRIGHTNESS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &input_brightness_)));
          set_has_input_brightness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_input_SHARPNESS;
        break;
      }
      
      // required int32 input_SHARPNESS = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_SHARPNESS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_sharpness_)));
          set_has_input_sharpness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_input_GAIN;
        break;
      }
      
      // required int64 input_GAIN = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_GAIN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &input_gain_)));
          set_has_input_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_input_network_ip;
        break;
      }
      
      // required string input_network_ip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_network_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_network_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->input_network_ip().data(), this->input_network_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_input_network_port;
        break;
      }
      
      // required string input_network_port = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_network_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_network_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->input_network_port().data(), this->input_network_port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_filters_crop_photo;
        break;
      }
      
      // required bool filters_crop_photo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filters_crop_photo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filters_crop_photo_)));
          set_has_filters_crop_photo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_filters_crop_firstPoint_x;
        break;
      }
      
      // required string filters_crop_firstPoint_x = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filters_crop_firstPoint_x:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filters_crop_firstpoint_x()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filters_crop_firstpoint_x().data(), this->filters_crop_firstpoint_x().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_filters_crop_firstPoint_y;
        break;
      }
      
      // required string filters_crop_firstPoint_y = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filters_crop_firstPoint_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filters_crop_firstpoint_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filters_crop_firstpoint_y().data(), this->filters_crop_firstpoint_y().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_filters_crop_secondPoint_x;
        break;
      }
      
      // required string filters_crop_secondPoint_x = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filters_crop_secondPoint_x:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filters_crop_secondpoint_x()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filters_crop_secondpoint_x().data(), this->filters_crop_secondpoint_x().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_filters_crop_secondPoint_y;
        break;
      }
      
      // required string filters_crop_secondPoint_y = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filters_crop_secondPoint_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filters_crop_secondpoint_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filters_crop_secondpoint_y().data(), this->filters_crop_secondpoint_y().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_filters_median_blur;
        break;
      }
      
      // required bool filters_median_blur = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filters_median_blur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filters_median_blur_)));
          set_has_filters_median_blur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_filters_median_blur_kernelSize;
        break;
      }
      
      // required string filters_median_blur_kernelSize = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filters_median_blur_kernelSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filters_median_blur_kernelsize()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filters_median_blur_kernelsize().data(), this->filters_median_blur_kernelsize().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_filters_Adaptive_threshold;
        break;
      }
      
      // required bool filters_Adaptive_threshold = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filters_Adaptive_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filters_adaptive_threshold_)));
          set_has_filters_adaptive_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_filters_Adaptive_threshold_blockSize;
        break;
      }
      
      // required int64 filters_Adaptive_threshold_blockSize = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filters_Adaptive_threshold_blockSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filters_adaptive_threshold_blocksize_)));
          set_has_filters_adaptive_threshold_blocksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_filters_Adaptive_threshold_C;
        break;
      }
      
      // required int64 filters_Adaptive_threshold_C = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filters_Adaptive_threshold_C:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filters_adaptive_threshold_c_)));
          set_has_filters_adaptive_threshold_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_filters_Threshold;
        break;
      }
      
      // required bool filters_Threshold = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filters_Threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filters_threshold_)));
          set_has_filters_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_filters_Threshold_value;
        break;
      }
      
      // required int64 filters_Threshold_value = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filters_Threshold_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filters_threshold_value_)));
          set_has_filters_threshold_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_filters_dilate;
        break;
      }
      
      // required bool filters_dilate = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filters_dilate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filters_dilate_)));
          set_has_filters_dilate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_filters_dilationSize;
        break;
      }
      
      // required string filters_dilationSize = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filters_dilationSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filters_dilationsize()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filters_dilationsize().data(), this->filters_dilationsize().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_filters_Canny;
        break;
      }
      
      // required bool filters_Canny = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filters_Canny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filters_canny_)));
          set_has_filters_canny();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_filters_Canny_First_Threshold;
        break;
      }
      
      // required int64 filters_Canny_First_Threshold = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filters_Canny_First_Threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filters_canny_first_threshold_)));
          set_has_filters_canny_first_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_filters_Canny_Second_Threshold;
        break;
      }
      
      // required int64 filters_Canny_Second_Threshold = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filters_Canny_Second_Threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filters_canny_second_threshold_)));
          set_has_filters_canny_second_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_filters_Canny_apertureSize;
        break;
      }
      
      // required string filters_Canny_apertureSize = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filters_Canny_apertureSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filters_canny_aperturesize()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filters_canny_aperturesize().data(), this->filters_canny_aperturesize().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_have_red;
        break;
      }
      
      // required bool have_red = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_red:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_red_)));
          set_has_have_red();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_red_instances;
        break;
      }
      
      // repeated .SystemSettings.color red_instances = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_red_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_red_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_red_instances;
        if (input->ExpectTag(240)) goto parse_have_blue;
        break;
      }
      
      // required bool have_blue = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_blue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_blue_)));
          set_has_have_blue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_blue_instances;
        break;
      }
      
      // repeated .SystemSettings.color blue_instances = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blue_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blue_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_blue_instances;
        if (input->ExpectTag(256)) goto parse_have_green;
        break;
      }
      
      // required bool have_green = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_green:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_green_)));
          set_has_have_green();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_green_instances;
        break;
      }
      
      // repeated .SystemSettings.color green_instances = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_green_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_green_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_green_instances;
        if (input->ExpectTag(272)) goto parse_have_yellow;
        break;
      }
      
      // required bool have_yellow = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_yellow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_yellow_)));
          set_has_have_yellow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_yellow_instances;
        break;
      }
      
      // repeated .SystemSettings.color yellow_instances = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yellow_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yellow_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_yellow_instances;
        if (input->ExpectTag(288)) goto parse_have_violet;
        break;
      }
      
      // required bool have_violet = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_violet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_violet_)));
          set_has_have_violet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_violet_instances;
        break;
      }
      
      // repeated .SystemSettings.color violet_instances = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_violet_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_violet_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_violet_instances;
        if (input->ExpectTag(304)) goto parse_have_cyan;
        break;
      }
      
      // required bool have_cyan = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_cyan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_cyan_)));
          set_has_have_cyan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_cyan_instances;
        break;
      }
      
      // repeated .SystemSettings.color cyan_instances = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cyan_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cyan_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_cyan_instances;
        if (input->ExpectTag(328)) goto parse_have_black;
        break;
      }
      
      // required bool have_black = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_black:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_black_)));
          set_has_have_black();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_black_instances;
        break;
      }
      
      // repeated .SystemSettings.color black_instances = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_black_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_black_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_black_instances;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool input_edit_camera_setting = 1;
  if (has_input_edit_camera_setting()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->input_edit_camera_setting(), output);
  }
  
  // required int64 input_WHITE_BALANCE_BLUE_U = 2;
  if (has_input_white_balance_blue_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->input_white_balance_blue_u(), output);
  }
  
  // required int64 input_WHITE_BALANCE_RED_V = 3;
  if (has_input_white_balance_red_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->input_white_balance_red_v(), output);
  }
  
  // required int64 input_EXPOSURE = 4;
  if (has_input_exposure()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->input_exposure(), output);
  }
  
  // required int64 input_BRIGHTNESS = 5;
  if (has_input_brightness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->input_brightness(), output);
  }
  
  // required int32 input_SHARPNESS = 6;
  if (has_input_sharpness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->input_sharpness(), output);
  }
  
  // required int64 input_GAIN = 7;
  if (has_input_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->input_gain(), output);
  }
  
  // required string input_network_ip = 8;
  if (has_input_network_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_network_ip().data(), this->input_network_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->input_network_ip(), output);
  }
  
  // required string input_network_port = 9;
  if (has_input_network_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_network_port().data(), this->input_network_port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->input_network_port(), output);
  }
  
  // required bool filters_crop_photo = 10;
  if (has_filters_crop_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->filters_crop_photo(), output);
  }
  
  // required string filters_crop_firstPoint_x = 11;
  if (has_filters_crop_firstpoint_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filters_crop_firstpoint_x().data(), this->filters_crop_firstpoint_x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->filters_crop_firstpoint_x(), output);
  }
  
  // required string filters_crop_firstPoint_y = 12;
  if (has_filters_crop_firstpoint_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filters_crop_firstpoint_y().data(), this->filters_crop_firstpoint_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->filters_crop_firstpoint_y(), output);
  }
  
  // required string filters_crop_secondPoint_x = 13;
  if (has_filters_crop_secondpoint_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filters_crop_secondpoint_x().data(), this->filters_crop_secondpoint_x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->filters_crop_secondpoint_x(), output);
  }
  
  // required string filters_crop_secondPoint_y = 14;
  if (has_filters_crop_secondpoint_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filters_crop_secondpoint_y().data(), this->filters_crop_secondpoint_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->filters_crop_secondpoint_y(), output);
  }
  
  // required bool filters_median_blur = 15;
  if (has_filters_median_blur()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->filters_median_blur(), output);
  }
  
  // required string filters_median_blur_kernelSize = 16;
  if (has_filters_median_blur_kernelsize()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filters_median_blur_kernelsize().data(), this->filters_median_blur_kernelsize().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->filters_median_blur_kernelsize(), output);
  }
  
  // required bool filters_Adaptive_threshold = 17;
  if (has_filters_adaptive_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->filters_adaptive_threshold(), output);
  }
  
  // required int64 filters_Adaptive_threshold_blockSize = 18;
  if (has_filters_adaptive_threshold_blocksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->filters_adaptive_threshold_blocksize(), output);
  }
  
  // required int64 filters_Adaptive_threshold_C = 19;
  if (has_filters_adaptive_threshold_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->filters_adaptive_threshold_c(), output);
  }
  
  // required bool filters_Threshold = 20;
  if (has_filters_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->filters_threshold(), output);
  }
  
  // required int64 filters_Threshold_value = 21;
  if (has_filters_threshold_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->filters_threshold_value(), output);
  }
  
  // required bool filters_dilate = 22;
  if (has_filters_dilate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->filters_dilate(), output);
  }
  
  // required string filters_dilationSize = 23;
  if (has_filters_dilationsize()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filters_dilationsize().data(), this->filters_dilationsize().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->filters_dilationsize(), output);
  }
  
  // required bool filters_Canny = 24;
  if (has_filters_canny()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->filters_canny(), output);
  }
  
  // required int64 filters_Canny_First_Threshold = 25;
  if (has_filters_canny_first_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->filters_canny_first_threshold(), output);
  }
  
  // required int64 filters_Canny_Second_Threshold = 26;
  if (has_filters_canny_second_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->filters_canny_second_threshold(), output);
  }
  
  // required string filters_Canny_apertureSize = 27;
  if (has_filters_canny_aperturesize()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filters_canny_aperturesize().data(), this->filters_canny_aperturesize().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->filters_canny_aperturesize(), output);
  }
  
  // required bool have_red = 28;
  if (has_have_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->have_red(), output);
  }
  
  // repeated .SystemSettings.color red_instances = 29;
  for (int i = 0; i < this->red_instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->red_instances(i), output);
  }
  
  // required bool have_blue = 30;
  if (has_have_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->have_blue(), output);
  }
  
  // repeated .SystemSettings.color blue_instances = 31;
  for (int i = 0; i < this->blue_instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->blue_instances(i), output);
  }
  
  // required bool have_green = 32;
  if (has_have_green()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->have_green(), output);
  }
  
  // repeated .SystemSettings.color green_instances = 33;
  for (int i = 0; i < this->green_instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->green_instances(i), output);
  }
  
  // required bool have_yellow = 34;
  if (has_have_yellow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->have_yellow(), output);
  }
  
  // repeated .SystemSettings.color yellow_instances = 35;
  for (int i = 0; i < this->yellow_instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->yellow_instances(i), output);
  }
  
  // required bool have_violet = 36;
  if (has_have_violet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->have_violet(), output);
  }
  
  // repeated .SystemSettings.color violet_instances = 37;
  for (int i = 0; i < this->violet_instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->violet_instances(i), output);
  }
  
  // required bool have_cyan = 38;
  if (has_have_cyan()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->have_cyan(), output);
  }
  
  // repeated .SystemSettings.color cyan_instances = 39;
  for (int i = 0; i < this->cyan_instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->cyan_instances(i), output);
  }
  
  // required bool have_black = 41;
  if (has_have_black()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->have_black(), output);
  }
  
  // repeated .SystemSettings.color black_instances = 42;
  for (int i = 0; i < this->black_instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->black_instances(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool input_edit_camera_setting = 1;
  if (has_input_edit_camera_setting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->input_edit_camera_setting(), target);
  }
  
  // required int64 input_WHITE_BALANCE_BLUE_U = 2;
  if (has_input_white_balance_blue_u()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->input_white_balance_blue_u(), target);
  }
  
  // required int64 input_WHITE_BALANCE_RED_V = 3;
  if (has_input_white_balance_red_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->input_white_balance_red_v(), target);
  }
  
  // required int64 input_EXPOSURE = 4;
  if (has_input_exposure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->input_exposure(), target);
  }
  
  // required int64 input_BRIGHTNESS = 5;
  if (has_input_brightness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->input_brightness(), target);
  }
  
  // required int32 input_SHARPNESS = 6;
  if (has_input_sharpness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->input_sharpness(), target);
  }
  
  // required int64 input_GAIN = 7;
  if (has_input_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->input_gain(), target);
  }
  
  // required string input_network_ip = 8;
  if (has_input_network_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_network_ip().data(), this->input_network_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->input_network_ip(), target);
  }
  
  // required string input_network_port = 9;
  if (has_input_network_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_network_port().data(), this->input_network_port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->input_network_port(), target);
  }
  
  // required bool filters_crop_photo = 10;
  if (has_filters_crop_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->filters_crop_photo(), target);
  }
  
  // required string filters_crop_firstPoint_x = 11;
  if (has_filters_crop_firstpoint_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filters_crop_firstpoint_x().data(), this->filters_crop_firstpoint_x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->filters_crop_firstpoint_x(), target);
  }
  
  // required string filters_crop_firstPoint_y = 12;
  if (has_filters_crop_firstpoint_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filters_crop_firstpoint_y().data(), this->filters_crop_firstpoint_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->filters_crop_firstpoint_y(), target);
  }
  
  // required string filters_crop_secondPoint_x = 13;
  if (has_filters_crop_secondpoint_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filters_crop_secondpoint_x().data(), this->filters_crop_secondpoint_x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->filters_crop_secondpoint_x(), target);
  }
  
  // required string filters_crop_secondPoint_y = 14;
  if (has_filters_crop_secondpoint_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filters_crop_secondpoint_y().data(), this->filters_crop_secondpoint_y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->filters_crop_secondpoint_y(), target);
  }
  
  // required bool filters_median_blur = 15;
  if (has_filters_median_blur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->filters_median_blur(), target);
  }
  
  // required string filters_median_blur_kernelSize = 16;
  if (has_filters_median_blur_kernelsize()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filters_median_blur_kernelsize().data(), this->filters_median_blur_kernelsize().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->filters_median_blur_kernelsize(), target);
  }
  
  // required bool filters_Adaptive_threshold = 17;
  if (has_filters_adaptive_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->filters_adaptive_threshold(), target);
  }
  
  // required int64 filters_Adaptive_threshold_blockSize = 18;
  if (has_filters_adaptive_threshold_blocksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->filters_adaptive_threshold_blocksize(), target);
  }
  
  // required int64 filters_Adaptive_threshold_C = 19;
  if (has_filters_adaptive_threshold_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->filters_adaptive_threshold_c(), target);
  }
  
  // required bool filters_Threshold = 20;
  if (has_filters_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->filters_threshold(), target);
  }
  
  // required int64 filters_Threshold_value = 21;
  if (has_filters_threshold_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->filters_threshold_value(), target);
  }
  
  // required bool filters_dilate = 22;
  if (has_filters_dilate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->filters_dilate(), target);
  }
  
  // required string filters_dilationSize = 23;
  if (has_filters_dilationsize()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filters_dilationsize().data(), this->filters_dilationsize().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->filters_dilationsize(), target);
  }
  
  // required bool filters_Canny = 24;
  if (has_filters_canny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->filters_canny(), target);
  }
  
  // required int64 filters_Canny_First_Threshold = 25;
  if (has_filters_canny_first_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->filters_canny_first_threshold(), target);
  }
  
  // required int64 filters_Canny_Second_Threshold = 26;
  if (has_filters_canny_second_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->filters_canny_second_threshold(), target);
  }
  
  // required string filters_Canny_apertureSize = 27;
  if (has_filters_canny_aperturesize()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filters_canny_aperturesize().data(), this->filters_canny_aperturesize().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->filters_canny_aperturesize(), target);
  }
  
  // required bool have_red = 28;
  if (has_have_red()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->have_red(), target);
  }
  
  // repeated .SystemSettings.color red_instances = 29;
  for (int i = 0; i < this->red_instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->red_instances(i), target);
  }
  
  // required bool have_blue = 30;
  if (has_have_blue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->have_blue(), target);
  }
  
  // repeated .SystemSettings.color blue_instances = 31;
  for (int i = 0; i < this->blue_instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->blue_instances(i), target);
  }
  
  // required bool have_green = 32;
  if (has_have_green()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->have_green(), target);
  }
  
  // repeated .SystemSettings.color green_instances = 33;
  for (int i = 0; i < this->green_instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->green_instances(i), target);
  }
  
  // required bool have_yellow = 34;
  if (has_have_yellow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->have_yellow(), target);
  }
  
  // repeated .SystemSettings.color yellow_instances = 35;
  for (int i = 0; i < this->yellow_instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->yellow_instances(i), target);
  }
  
  // required bool have_violet = 36;
  if (has_have_violet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->have_violet(), target);
  }
  
  // repeated .SystemSettings.color violet_instances = 37;
  for (int i = 0; i < this->violet_instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->violet_instances(i), target);
  }
  
  // required bool have_cyan = 38;
  if (has_have_cyan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->have_cyan(), target);
  }
  
  // repeated .SystemSettings.color cyan_instances = 39;
  for (int i = 0; i < this->cyan_instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->cyan_instances(i), target);
  }
  
  // required bool have_black = 41;
  if (has_have_black()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->have_black(), target);
  }
  
  // repeated .SystemSettings.color black_instances = 42;
  for (int i = 0; i < this->black_instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->black_instances(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemSettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool input_edit_camera_setting = 1;
    if (has_input_edit_camera_setting()) {
      total_size += 1 + 1;
    }
    
    // required int64 input_WHITE_BALANCE_BLUE_U = 2;
    if (has_input_white_balance_blue_u()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->input_white_balance_blue_u());
    }
    
    // required int64 input_WHITE_BALANCE_RED_V = 3;
    if (has_input_white_balance_red_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->input_white_balance_red_v());
    }
    
    // required int64 input_EXPOSURE = 4;
    if (has_input_exposure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->input_exposure());
    }
    
    // required int64 input_BRIGHTNESS = 5;
    if (has_input_brightness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->input_brightness());
    }
    
    // required int32 input_SHARPNESS = 6;
    if (has_input_sharpness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input_sharpness());
    }
    
    // required int64 input_GAIN = 7;
    if (has_input_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->input_gain());
    }
    
    // required string input_network_ip = 8;
    if (has_input_network_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_network_ip());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string input_network_port = 9;
    if (has_input_network_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_network_port());
    }
    
    // required bool filters_crop_photo = 10;
    if (has_filters_crop_photo()) {
      total_size += 1 + 1;
    }
    
    // required string filters_crop_firstPoint_x = 11;
    if (has_filters_crop_firstpoint_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filters_crop_firstpoint_x());
    }
    
    // required string filters_crop_firstPoint_y = 12;
    if (has_filters_crop_firstpoint_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filters_crop_firstpoint_y());
    }
    
    // required string filters_crop_secondPoint_x = 13;
    if (has_filters_crop_secondpoint_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filters_crop_secondpoint_x());
    }
    
    // required string filters_crop_secondPoint_y = 14;
    if (has_filters_crop_secondpoint_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filters_crop_secondpoint_y());
    }
    
    // required bool filters_median_blur = 15;
    if (has_filters_median_blur()) {
      total_size += 1 + 1;
    }
    
    // required string filters_median_blur_kernelSize = 16;
    if (has_filters_median_blur_kernelsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filters_median_blur_kernelsize());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required bool filters_Adaptive_threshold = 17;
    if (has_filters_adaptive_threshold()) {
      total_size += 2 + 1;
    }
    
    // required int64 filters_Adaptive_threshold_blockSize = 18;
    if (has_filters_adaptive_threshold_blocksize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filters_adaptive_threshold_blocksize());
    }
    
    // required int64 filters_Adaptive_threshold_C = 19;
    if (has_filters_adaptive_threshold_c()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filters_adaptive_threshold_c());
    }
    
    // required bool filters_Threshold = 20;
    if (has_filters_threshold()) {
      total_size += 2 + 1;
    }
    
    // required int64 filters_Threshold_value = 21;
    if (has_filters_threshold_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filters_threshold_value());
    }
    
    // required bool filters_dilate = 22;
    if (has_filters_dilate()) {
      total_size += 2 + 1;
    }
    
    // required string filters_dilationSize = 23;
    if (has_filters_dilationsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filters_dilationsize());
    }
    
    // required bool filters_Canny = 24;
    if (has_filters_canny()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int64 filters_Canny_First_Threshold = 25;
    if (has_filters_canny_first_threshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filters_canny_first_threshold());
    }
    
    // required int64 filters_Canny_Second_Threshold = 26;
    if (has_filters_canny_second_threshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filters_canny_second_threshold());
    }
    
    // required string filters_Canny_apertureSize = 27;
    if (has_filters_canny_aperturesize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filters_canny_aperturesize());
    }
    
    // required bool have_red = 28;
    if (has_have_red()) {
      total_size += 2 + 1;
    }
    
    // required bool have_blue = 30;
    if (has_have_blue()) {
      total_size += 2 + 1;
    }
    
    // required bool have_green = 32;
    if (has_have_green()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    // required bool have_yellow = 34;
    if (has_have_yellow()) {
      total_size += 2 + 1;
    }
    
    // required bool have_violet = 36;
    if (has_have_violet()) {
      total_size += 2 + 1;
    }
    
    // required bool have_cyan = 38;
    if (has_have_cyan()) {
      total_size += 2 + 1;
    }
    
    // required bool have_black = 41;
    if (has_have_black()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated .SystemSettings.color red_instances = 29;
  total_size += 2 * this->red_instances_size();
  for (int i = 0; i < this->red_instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->red_instances(i));
  }
  
  // repeated .SystemSettings.color blue_instances = 31;
  total_size += 2 * this->blue_instances_size();
  for (int i = 0; i < this->blue_instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blue_instances(i));
  }
  
  // repeated .SystemSettings.color green_instances = 33;
  total_size += 2 * this->green_instances_size();
  for (int i = 0; i < this->green_instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->green_instances(i));
  }
  
  // repeated .SystemSettings.color yellow_instances = 35;
  total_size += 2 * this->yellow_instances_size();
  for (int i = 0; i < this->yellow_instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yellow_instances(i));
  }
  
  // repeated .SystemSettings.color violet_instances = 37;
  total_size += 2 * this->violet_instances_size();
  for (int i = 0; i < this->violet_instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->violet_instances(i));
  }
  
  // repeated .SystemSettings.color cyan_instances = 39;
  total_size += 2 * this->cyan_instances_size();
  for (int i = 0; i < this->cyan_instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cyan_instances(i));
  }
  
  // repeated .SystemSettings.color black_instances = 42;
  total_size += 2 * this->black_instances_size();
  for (int i = 0; i < this->black_instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->black_instances(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemSettings::MergeFrom(const SystemSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  red_instances_.MergeFrom(from.red_instances_);
  blue_instances_.MergeFrom(from.blue_instances_);
  green_instances_.MergeFrom(from.green_instances_);
  yellow_instances_.MergeFrom(from.yellow_instances_);
  violet_instances_.MergeFrom(from.violet_instances_);
  cyan_instances_.MergeFrom(from.cyan_instances_);
  black_instances_.MergeFrom(from.black_instances_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_input_edit_camera_setting()) {
      set_input_edit_camera_setting(from.input_edit_camera_setting());
    }
    if (from.has_input_white_balance_blue_u()) {
      set_input_white_balance_blue_u(from.input_white_balance_blue_u());
    }
    if (from.has_input_white_balance_red_v()) {
      set_input_white_balance_red_v(from.input_white_balance_red_v());
    }
    if (from.has_input_exposure()) {
      set_input_exposure(from.input_exposure());
    }
    if (from.has_input_brightness()) {
      set_input_brightness(from.input_brightness());
    }
    if (from.has_input_sharpness()) {
      set_input_sharpness(from.input_sharpness());
    }
    if (from.has_input_gain()) {
      set_input_gain(from.input_gain());
    }
    if (from.has_input_network_ip()) {
      set_input_network_ip(from.input_network_ip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_input_network_port()) {
      set_input_network_port(from.input_network_port());
    }
    if (from.has_filters_crop_photo()) {
      set_filters_crop_photo(from.filters_crop_photo());
    }
    if (from.has_filters_crop_firstpoint_x()) {
      set_filters_crop_firstpoint_x(from.filters_crop_firstpoint_x());
    }
    if (from.has_filters_crop_firstpoint_y()) {
      set_filters_crop_firstpoint_y(from.filters_crop_firstpoint_y());
    }
    if (from.has_filters_crop_secondpoint_x()) {
      set_filters_crop_secondpoint_x(from.filters_crop_secondpoint_x());
    }
    if (from.has_filters_crop_secondpoint_y()) {
      set_filters_crop_secondpoint_y(from.filters_crop_secondpoint_y());
    }
    if (from.has_filters_median_blur()) {
      set_filters_median_blur(from.filters_median_blur());
    }
    if (from.has_filters_median_blur_kernelsize()) {
      set_filters_median_blur_kernelsize(from.filters_median_blur_kernelsize());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_filters_adaptive_threshold()) {
      set_filters_adaptive_threshold(from.filters_adaptive_threshold());
    }
    if (from.has_filters_adaptive_threshold_blocksize()) {
      set_filters_adaptive_threshold_blocksize(from.filters_adaptive_threshold_blocksize());
    }
    if (from.has_filters_adaptive_threshold_c()) {
      set_filters_adaptive_threshold_c(from.filters_adaptive_threshold_c());
    }
    if (from.has_filters_threshold()) {
      set_filters_threshold(from.filters_threshold());
    }
    if (from.has_filters_threshold_value()) {
      set_filters_threshold_value(from.filters_threshold_value());
    }
    if (from.has_filters_dilate()) {
      set_filters_dilate(from.filters_dilate());
    }
    if (from.has_filters_dilationsize()) {
      set_filters_dilationsize(from.filters_dilationsize());
    }
    if (from.has_filters_canny()) {
      set_filters_canny(from.filters_canny());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_filters_canny_first_threshold()) {
      set_filters_canny_first_threshold(from.filters_canny_first_threshold());
    }
    if (from.has_filters_canny_second_threshold()) {
      set_filters_canny_second_threshold(from.filters_canny_second_threshold());
    }
    if (from.has_filters_canny_aperturesize()) {
      set_filters_canny_aperturesize(from.filters_canny_aperturesize());
    }
    if (from.has_have_red()) {
      set_have_red(from.have_red());
    }
    if (from.has_have_blue()) {
      set_have_blue(from.have_blue());
    }
    if (from.has_have_green()) {
      set_have_green(from.have_green());
    }
  }
  if (from._has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    if (from.has_have_yellow()) {
      set_have_yellow(from.have_yellow());
    }
    if (from.has_have_violet()) {
      set_have_violet(from.have_violet());
    }
    if (from.has_have_cyan()) {
      set_have_cyan(from.have_cyan());
    }
    if (from.has_have_black()) {
      set_have_black(from.have_black());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemSettings::CopyFrom(const SystemSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0xafffffff) != 0xafffffff) return false;
  if ((_has_bits_[1] & 0x000000aa) != 0x000000aa) return false;
  
  for (int i = 0; i < red_instances_size(); i++) {
    if (!this->red_instances(i).IsInitialized()) return false;
  }
  for (int i = 0; i < blue_instances_size(); i++) {
    if (!this->blue_instances(i).IsInitialized()) return false;
  }
  for (int i = 0; i < green_instances_size(); i++) {
    if (!this->green_instances(i).IsInitialized()) return false;
  }
  for (int i = 0; i < yellow_instances_size(); i++) {
    if (!this->yellow_instances(i).IsInitialized()) return false;
  }
  for (int i = 0; i < violet_instances_size(); i++) {
    if (!this->violet_instances(i).IsInitialized()) return false;
  }
  for (int i = 0; i < cyan_instances_size(); i++) {
    if (!this->cyan_instances(i).IsInitialized()) return false;
  }
  for (int i = 0; i < black_instances_size(); i++) {
    if (!this->black_instances(i).IsInitialized()) return false;
  }
  return true;
}

void SystemSettings::Swap(SystemSettings* other) {
  if (other != this) {
    std::swap(input_edit_camera_setting_, other->input_edit_camera_setting_);
    std::swap(input_white_balance_blue_u_, other->input_white_balance_blue_u_);
    std::swap(input_white_balance_red_v_, other->input_white_balance_red_v_);
    std::swap(input_exposure_, other->input_exposure_);
    std::swap(input_brightness_, other->input_brightness_);
    std::swap(input_sharpness_, other->input_sharpness_);
    std::swap(input_gain_, other->input_gain_);
    std::swap(input_network_ip_, other->input_network_ip_);
    std::swap(input_network_port_, other->input_network_port_);
    std::swap(filters_crop_photo_, other->filters_crop_photo_);
    std::swap(filters_crop_firstpoint_x_, other->filters_crop_firstpoint_x_);
    std::swap(filters_crop_firstpoint_y_, other->filters_crop_firstpoint_y_);
    std::swap(filters_crop_secondpoint_x_, other->filters_crop_secondpoint_x_);
    std::swap(filters_crop_secondpoint_y_, other->filters_crop_secondpoint_y_);
    std::swap(filters_median_blur_, other->filters_median_blur_);
    std::swap(filters_median_blur_kernelsize_, other->filters_median_blur_kernelsize_);
    std::swap(filters_adaptive_threshold_, other->filters_adaptive_threshold_);
    std::swap(filters_adaptive_threshold_blocksize_, other->filters_adaptive_threshold_blocksize_);
    std::swap(filters_adaptive_threshold_c_, other->filters_adaptive_threshold_c_);
    std::swap(filters_threshold_, other->filters_threshold_);
    std::swap(filters_threshold_value_, other->filters_threshold_value_);
    std::swap(filters_dilate_, other->filters_dilate_);
    std::swap(filters_dilationsize_, other->filters_dilationsize_);
    std::swap(filters_canny_, other->filters_canny_);
    std::swap(filters_canny_first_threshold_, other->filters_canny_first_threshold_);
    std::swap(filters_canny_second_threshold_, other->filters_canny_second_threshold_);
    std::swap(filters_canny_aperturesize_, other->filters_canny_aperturesize_);
    std::swap(have_red_, other->have_red_);
    red_instances_.Swap(&other->red_instances_);
    std::swap(have_blue_, other->have_blue_);
    blue_instances_.Swap(&other->blue_instances_);
    std::swap(have_green_, other->have_green_);
    green_instances_.Swap(&other->green_instances_);
    std::swap(have_yellow_, other->have_yellow_);
    yellow_instances_.Swap(&other->yellow_instances_);
    std::swap(have_violet_, other->have_violet_);
    violet_instances_.Swap(&other->violet_instances_);
    std::swap(have_cyan_, other->have_cyan_);
    cyan_instances_.Swap(&other->cyan_instances_);
    std::swap(have_black_, other->have_black_);
    black_instances_.Swap(&other->black_instances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemSettings_descriptor_;
  metadata.reflection = SystemSettings_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
