// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SystemSettings.proto

#ifndef PROTOBUF_SystemSettings_2eproto__INCLUDED
#define PROTOBUF_SystemSettings_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SystemSettings_2eproto();
void protobuf_AssignDesc_SystemSettings_2eproto();
void protobuf_ShutdownFile_SystemSettings_2eproto();

class SystemSettings;
class SystemSettings_color;

// ===================================================================

class SystemSettings_color : public ::google::protobuf::Message {
 public:
  SystemSettings_color();
  virtual ~SystemSettings_color();
  
  SystemSettings_color(const SystemSettings_color& from);
  
  inline SystemSettings_color& operator=(const SystemSettings_color& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemSettings_color& default_instance();
  
  void Swap(SystemSettings_color* other);
  
  // implements Message ----------------------------------------------
  
  SystemSettings_color* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemSettings_color& from);
  void MergeFrom(const SystemSettings_color& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float min_hue = 1;
  inline bool has_min_hue() const;
  inline void clear_min_hue();
  static const int kMinHueFieldNumber = 1;
  inline float min_hue() const;
  inline void set_min_hue(float value);
  
  // required float max_hue = 2;
  inline bool has_max_hue() const;
  inline void clear_max_hue();
  static const int kMaxHueFieldNumber = 2;
  inline float max_hue() const;
  inline void set_max_hue(float value);
  
  // @@protoc_insertion_point(class_scope:SystemSettings.color)
 private:
  inline void set_has_min_hue();
  inline void clear_has_min_hue();
  inline void set_has_max_hue();
  inline void clear_has_max_hue();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float min_hue_;
  float max_hue_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SystemSettings_2eproto();
  friend void protobuf_AssignDesc_SystemSettings_2eproto();
  friend void protobuf_ShutdownFile_SystemSettings_2eproto();
  
  void InitAsDefaultInstance();
  static SystemSettings_color* default_instance_;
};
// -------------------------------------------------------------------

class SystemSettings : public ::google::protobuf::Message {
 public:
  SystemSettings();
  virtual ~SystemSettings();
  
  SystemSettings(const SystemSettings& from);
  
  inline SystemSettings& operator=(const SystemSettings& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemSettings& default_instance();
  
  void Swap(SystemSettings* other);
  
  // implements Message ----------------------------------------------
  
  SystemSettings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemSettings& from);
  void MergeFrom(const SystemSettings& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SystemSettings_color color;
  
  // accessors -------------------------------------------------------
  
  // required bool input_edit_camera_setting = 1;
  inline bool has_input_edit_camera_setting() const;
  inline void clear_input_edit_camera_setting();
  static const int kInputEditCameraSettingFieldNumber = 1;
  inline bool input_edit_camera_setting() const;
  inline void set_input_edit_camera_setting(bool value);
  
  // required int64 input_WHITE_BALANCE_BLUE_U = 2;
  inline bool has_input_white_balance_blue_u() const;
  inline void clear_input_white_balance_blue_u();
  static const int kInputWHITEBALANCEBLUEUFieldNumber = 2;
  inline ::google::protobuf::int64 input_white_balance_blue_u() const;
  inline void set_input_white_balance_blue_u(::google::protobuf::int64 value);
  
  // required int64 input_WHITE_BALANCE_RED_V = 3;
  inline bool has_input_white_balance_red_v() const;
  inline void clear_input_white_balance_red_v();
  static const int kInputWHITEBALANCEREDVFieldNumber = 3;
  inline ::google::protobuf::int64 input_white_balance_red_v() const;
  inline void set_input_white_balance_red_v(::google::protobuf::int64 value);
  
  // required int64 input_EXPOSURE = 4;
  inline bool has_input_exposure() const;
  inline void clear_input_exposure();
  static const int kInputEXPOSUREFieldNumber = 4;
  inline ::google::protobuf::int64 input_exposure() const;
  inline void set_input_exposure(::google::protobuf::int64 value);
  
  // required int64 input_BRIGHTNESS = 5;
  inline bool has_input_brightness() const;
  inline void clear_input_brightness();
  static const int kInputBRIGHTNESSFieldNumber = 5;
  inline ::google::protobuf::int64 input_brightness() const;
  inline void set_input_brightness(::google::protobuf::int64 value);
  
  // required int32 input_SHARPNESS = 6;
  inline bool has_input_sharpness() const;
  inline void clear_input_sharpness();
  static const int kInputSHARPNESSFieldNumber = 6;
  inline ::google::protobuf::int32 input_sharpness() const;
  inline void set_input_sharpness(::google::protobuf::int32 value);
  
  // required int64 input_GAIN = 7;
  inline bool has_input_gain() const;
  inline void clear_input_gain();
  static const int kInputGAINFieldNumber = 7;
  inline ::google::protobuf::int64 input_gain() const;
  inline void set_input_gain(::google::protobuf::int64 value);
  
  // required string input_network_ip = 8;
  inline bool has_input_network_ip() const;
  inline void clear_input_network_ip();
  static const int kInputNetworkIpFieldNumber = 8;
  inline const ::std::string& input_network_ip() const;
  inline void set_input_network_ip(const ::std::string& value);
  inline void set_input_network_ip(const char* value);
  inline void set_input_network_ip(const char* value, size_t size);
  inline ::std::string* mutable_input_network_ip();
  inline ::std::string* release_input_network_ip();
  
  // required string input_network_port = 9;
  inline bool has_input_network_port() const;
  inline void clear_input_network_port();
  static const int kInputNetworkPortFieldNumber = 9;
  inline const ::std::string& input_network_port() const;
  inline void set_input_network_port(const ::std::string& value);
  inline void set_input_network_port(const char* value);
  inline void set_input_network_port(const char* value, size_t size);
  inline ::std::string* mutable_input_network_port();
  inline ::std::string* release_input_network_port();
  
  // required bool filters_crop_photo = 10;
  inline bool has_filters_crop_photo() const;
  inline void clear_filters_crop_photo();
  static const int kFiltersCropPhotoFieldNumber = 10;
  inline bool filters_crop_photo() const;
  inline void set_filters_crop_photo(bool value);
  
  // required string filters_crop_firstPoint_x = 11;
  inline bool has_filters_crop_firstpoint_x() const;
  inline void clear_filters_crop_firstpoint_x();
  static const int kFiltersCropFirstPointXFieldNumber = 11;
  inline const ::std::string& filters_crop_firstpoint_x() const;
  inline void set_filters_crop_firstpoint_x(const ::std::string& value);
  inline void set_filters_crop_firstpoint_x(const char* value);
  inline void set_filters_crop_firstpoint_x(const char* value, size_t size);
  inline ::std::string* mutable_filters_crop_firstpoint_x();
  inline ::std::string* release_filters_crop_firstpoint_x();
  
  // required string filters_crop_firstPoint_y = 12;
  inline bool has_filters_crop_firstpoint_y() const;
  inline void clear_filters_crop_firstpoint_y();
  static const int kFiltersCropFirstPointYFieldNumber = 12;
  inline const ::std::string& filters_crop_firstpoint_y() const;
  inline void set_filters_crop_firstpoint_y(const ::std::string& value);
  inline void set_filters_crop_firstpoint_y(const char* value);
  inline void set_filters_crop_firstpoint_y(const char* value, size_t size);
  inline ::std::string* mutable_filters_crop_firstpoint_y();
  inline ::std::string* release_filters_crop_firstpoint_y();
  
  // required string filters_crop_secondPoint_x = 13;
  inline bool has_filters_crop_secondpoint_x() const;
  inline void clear_filters_crop_secondpoint_x();
  static const int kFiltersCropSecondPointXFieldNumber = 13;
  inline const ::std::string& filters_crop_secondpoint_x() const;
  inline void set_filters_crop_secondpoint_x(const ::std::string& value);
  inline void set_filters_crop_secondpoint_x(const char* value);
  inline void set_filters_crop_secondpoint_x(const char* value, size_t size);
  inline ::std::string* mutable_filters_crop_secondpoint_x();
  inline ::std::string* release_filters_crop_secondpoint_x();
  
  // required string filters_crop_secondPoint_y = 14;
  inline bool has_filters_crop_secondpoint_y() const;
  inline void clear_filters_crop_secondpoint_y();
  static const int kFiltersCropSecondPointYFieldNumber = 14;
  inline const ::std::string& filters_crop_secondpoint_y() const;
  inline void set_filters_crop_secondpoint_y(const ::std::string& value);
  inline void set_filters_crop_secondpoint_y(const char* value);
  inline void set_filters_crop_secondpoint_y(const char* value, size_t size);
  inline ::std::string* mutable_filters_crop_secondpoint_y();
  inline ::std::string* release_filters_crop_secondpoint_y();
  
  // required bool filters_median_blur = 15;
  inline bool has_filters_median_blur() const;
  inline void clear_filters_median_blur();
  static const int kFiltersMedianBlurFieldNumber = 15;
  inline bool filters_median_blur() const;
  inline void set_filters_median_blur(bool value);
  
  // required string filters_median_blur_kernelSize = 16;
  inline bool has_filters_median_blur_kernelsize() const;
  inline void clear_filters_median_blur_kernelsize();
  static const int kFiltersMedianBlurKernelSizeFieldNumber = 16;
  inline const ::std::string& filters_median_blur_kernelsize() const;
  inline void set_filters_median_blur_kernelsize(const ::std::string& value);
  inline void set_filters_median_blur_kernelsize(const char* value);
  inline void set_filters_median_blur_kernelsize(const char* value, size_t size);
  inline ::std::string* mutable_filters_median_blur_kernelsize();
  inline ::std::string* release_filters_median_blur_kernelsize();
  
  // required bool filters_Adaptive_threshold = 17;
  inline bool has_filters_adaptive_threshold() const;
  inline void clear_filters_adaptive_threshold();
  static const int kFiltersAdaptiveThresholdFieldNumber = 17;
  inline bool filters_adaptive_threshold() const;
  inline void set_filters_adaptive_threshold(bool value);
  
  // required int64 filters_Adaptive_threshold_blockSize = 18;
  inline bool has_filters_adaptive_threshold_blocksize() const;
  inline void clear_filters_adaptive_threshold_blocksize();
  static const int kFiltersAdaptiveThresholdBlockSizeFieldNumber = 18;
  inline ::google::protobuf::int64 filters_adaptive_threshold_blocksize() const;
  inline void set_filters_adaptive_threshold_blocksize(::google::protobuf::int64 value);
  
  // required int64 filters_Adaptive_threshold_C = 19;
  inline bool has_filters_adaptive_threshold_c() const;
  inline void clear_filters_adaptive_threshold_c();
  static const int kFiltersAdaptiveThresholdCFieldNumber = 19;
  inline ::google::protobuf::int64 filters_adaptive_threshold_c() const;
  inline void set_filters_adaptive_threshold_c(::google::protobuf::int64 value);
  
  // required bool filters_Threshold = 20;
  inline bool has_filters_threshold() const;
  inline void clear_filters_threshold();
  static const int kFiltersThresholdFieldNumber = 20;
  inline bool filters_threshold() const;
  inline void set_filters_threshold(bool value);
  
  // required int64 filters_Threshold_value = 21;
  inline bool has_filters_threshold_value() const;
  inline void clear_filters_threshold_value();
  static const int kFiltersThresholdValueFieldNumber = 21;
  inline ::google::protobuf::int64 filters_threshold_value() const;
  inline void set_filters_threshold_value(::google::protobuf::int64 value);
  
  // required bool filters_dilate = 22;
  inline bool has_filters_dilate() const;
  inline void clear_filters_dilate();
  static const int kFiltersDilateFieldNumber = 22;
  inline bool filters_dilate() const;
  inline void set_filters_dilate(bool value);
  
  // required string filters_dilationSize = 23;
  inline bool has_filters_dilationsize() const;
  inline void clear_filters_dilationsize();
  static const int kFiltersDilationSizeFieldNumber = 23;
  inline const ::std::string& filters_dilationsize() const;
  inline void set_filters_dilationsize(const ::std::string& value);
  inline void set_filters_dilationsize(const char* value);
  inline void set_filters_dilationsize(const char* value, size_t size);
  inline ::std::string* mutable_filters_dilationsize();
  inline ::std::string* release_filters_dilationsize();
  
  // required bool filters_Canny = 24;
  inline bool has_filters_canny() const;
  inline void clear_filters_canny();
  static const int kFiltersCannyFieldNumber = 24;
  inline bool filters_canny() const;
  inline void set_filters_canny(bool value);
  
  // required int64 filters_Canny_First_Threshold = 25;
  inline bool has_filters_canny_first_threshold() const;
  inline void clear_filters_canny_first_threshold();
  static const int kFiltersCannyFirstThresholdFieldNumber = 25;
  inline ::google::protobuf::int64 filters_canny_first_threshold() const;
  inline void set_filters_canny_first_threshold(::google::protobuf::int64 value);
  
  // required int64 filters_Canny_Second_Threshold = 26;
  inline bool has_filters_canny_second_threshold() const;
  inline void clear_filters_canny_second_threshold();
  static const int kFiltersCannySecondThresholdFieldNumber = 26;
  inline ::google::protobuf::int64 filters_canny_second_threshold() const;
  inline void set_filters_canny_second_threshold(::google::protobuf::int64 value);
  
  // required string filters_Canny_apertureSize = 27;
  inline bool has_filters_canny_aperturesize() const;
  inline void clear_filters_canny_aperturesize();
  static const int kFiltersCannyApertureSizeFieldNumber = 27;
  inline const ::std::string& filters_canny_aperturesize() const;
  inline void set_filters_canny_aperturesize(const ::std::string& value);
  inline void set_filters_canny_aperturesize(const char* value);
  inline void set_filters_canny_aperturesize(const char* value, size_t size);
  inline ::std::string* mutable_filters_canny_aperturesize();
  inline ::std::string* release_filters_canny_aperturesize();
  
  // required bool have_red = 28;
  inline bool has_have_red() const;
  inline void clear_have_red();
  static const int kHaveRedFieldNumber = 28;
  inline bool have_red() const;
  inline void set_have_red(bool value);
  
  // repeated .SystemSettings.color red_instances = 29;
  inline int red_instances_size() const;
  inline void clear_red_instances();
  static const int kRedInstancesFieldNumber = 29;
  inline const ::SystemSettings_color& red_instances(int index) const;
  inline ::SystemSettings_color* mutable_red_instances(int index);
  inline ::SystemSettings_color* add_red_instances();
  inline const ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >&
      red_instances() const;
  inline ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >*
      mutable_red_instances();
  
  // required bool have_blue = 30;
  inline bool has_have_blue() const;
  inline void clear_have_blue();
  static const int kHaveBlueFieldNumber = 30;
  inline bool have_blue() const;
  inline void set_have_blue(bool value);
  
  // repeated .SystemSettings.color blue_instances = 31;
  inline int blue_instances_size() const;
  inline void clear_blue_instances();
  static const int kBlueInstancesFieldNumber = 31;
  inline const ::SystemSettings_color& blue_instances(int index) const;
  inline ::SystemSettings_color* mutable_blue_instances(int index);
  inline ::SystemSettings_color* add_blue_instances();
  inline const ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >&
      blue_instances() const;
  inline ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >*
      mutable_blue_instances();
  
  // required bool have_green = 32;
  inline bool has_have_green() const;
  inline void clear_have_green();
  static const int kHaveGreenFieldNumber = 32;
  inline bool have_green() const;
  inline void set_have_green(bool value);
  
  // repeated .SystemSettings.color green_instances = 33;
  inline int green_instances_size() const;
  inline void clear_green_instances();
  static const int kGreenInstancesFieldNumber = 33;
  inline const ::SystemSettings_color& green_instances(int index) const;
  inline ::SystemSettings_color* mutable_green_instances(int index);
  inline ::SystemSettings_color* add_green_instances();
  inline const ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >&
      green_instances() const;
  inline ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >*
      mutable_green_instances();
  
  // required bool have_yellow = 34;
  inline bool has_have_yellow() const;
  inline void clear_have_yellow();
  static const int kHaveYellowFieldNumber = 34;
  inline bool have_yellow() const;
  inline void set_have_yellow(bool value);
  
  // repeated .SystemSettings.color yellow_instances = 35;
  inline int yellow_instances_size() const;
  inline void clear_yellow_instances();
  static const int kYellowInstancesFieldNumber = 35;
  inline const ::SystemSettings_color& yellow_instances(int index) const;
  inline ::SystemSettings_color* mutable_yellow_instances(int index);
  inline ::SystemSettings_color* add_yellow_instances();
  inline const ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >&
      yellow_instances() const;
  inline ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >*
      mutable_yellow_instances();
  
  // required bool have_violet = 36;
  inline bool has_have_violet() const;
  inline void clear_have_violet();
  static const int kHaveVioletFieldNumber = 36;
  inline bool have_violet() const;
  inline void set_have_violet(bool value);
  
  // repeated .SystemSettings.color violet_instances = 37;
  inline int violet_instances_size() const;
  inline void clear_violet_instances();
  static const int kVioletInstancesFieldNumber = 37;
  inline const ::SystemSettings_color& violet_instances(int index) const;
  inline ::SystemSettings_color* mutable_violet_instances(int index);
  inline ::SystemSettings_color* add_violet_instances();
  inline const ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >&
      violet_instances() const;
  inline ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >*
      mutable_violet_instances();
  
  // required bool have_cyan = 38;
  inline bool has_have_cyan() const;
  inline void clear_have_cyan();
  static const int kHaveCyanFieldNumber = 38;
  inline bool have_cyan() const;
  inline void set_have_cyan(bool value);
  
  // repeated .SystemSettings.color cyan_instances = 39;
  inline int cyan_instances_size() const;
  inline void clear_cyan_instances();
  static const int kCyanInstancesFieldNumber = 39;
  inline const ::SystemSettings_color& cyan_instances(int index) const;
  inline ::SystemSettings_color* mutable_cyan_instances(int index);
  inline ::SystemSettings_color* add_cyan_instances();
  inline const ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >&
      cyan_instances() const;
  inline ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >*
      mutable_cyan_instances();
  
  // required bool have_black = 41;
  inline bool has_have_black() const;
  inline void clear_have_black();
  static const int kHaveBlackFieldNumber = 41;
  inline bool have_black() const;
  inline void set_have_black(bool value);
  
  // repeated .SystemSettings.color black_instances = 42;
  inline int black_instances_size() const;
  inline void clear_black_instances();
  static const int kBlackInstancesFieldNumber = 42;
  inline const ::SystemSettings_color& black_instances(int index) const;
  inline ::SystemSettings_color* mutable_black_instances(int index);
  inline ::SystemSettings_color* add_black_instances();
  inline const ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >&
      black_instances() const;
  inline ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >*
      mutable_black_instances();
  
  // @@protoc_insertion_point(class_scope:SystemSettings)
 private:
  inline void set_has_input_edit_camera_setting();
  inline void clear_has_input_edit_camera_setting();
  inline void set_has_input_white_balance_blue_u();
  inline void clear_has_input_white_balance_blue_u();
  inline void set_has_input_white_balance_red_v();
  inline void clear_has_input_white_balance_red_v();
  inline void set_has_input_exposure();
  inline void clear_has_input_exposure();
  inline void set_has_input_brightness();
  inline void clear_has_input_brightness();
  inline void set_has_input_sharpness();
  inline void clear_has_input_sharpness();
  inline void set_has_input_gain();
  inline void clear_has_input_gain();
  inline void set_has_input_network_ip();
  inline void clear_has_input_network_ip();
  inline void set_has_input_network_port();
  inline void clear_has_input_network_port();
  inline void set_has_filters_crop_photo();
  inline void clear_has_filters_crop_photo();
  inline void set_has_filters_crop_firstpoint_x();
  inline void clear_has_filters_crop_firstpoint_x();
  inline void set_has_filters_crop_firstpoint_y();
  inline void clear_has_filters_crop_firstpoint_y();
  inline void set_has_filters_crop_secondpoint_x();
  inline void clear_has_filters_crop_secondpoint_x();
  inline void set_has_filters_crop_secondpoint_y();
  inline void clear_has_filters_crop_secondpoint_y();
  inline void set_has_filters_median_blur();
  inline void clear_has_filters_median_blur();
  inline void set_has_filters_median_blur_kernelsize();
  inline void clear_has_filters_median_blur_kernelsize();
  inline void set_has_filters_adaptive_threshold();
  inline void clear_has_filters_adaptive_threshold();
  inline void set_has_filters_adaptive_threshold_blocksize();
  inline void clear_has_filters_adaptive_threshold_blocksize();
  inline void set_has_filters_adaptive_threshold_c();
  inline void clear_has_filters_adaptive_threshold_c();
  inline void set_has_filters_threshold();
  inline void clear_has_filters_threshold();
  inline void set_has_filters_threshold_value();
  inline void clear_has_filters_threshold_value();
  inline void set_has_filters_dilate();
  inline void clear_has_filters_dilate();
  inline void set_has_filters_dilationsize();
  inline void clear_has_filters_dilationsize();
  inline void set_has_filters_canny();
  inline void clear_has_filters_canny();
  inline void set_has_filters_canny_first_threshold();
  inline void clear_has_filters_canny_first_threshold();
  inline void set_has_filters_canny_second_threshold();
  inline void clear_has_filters_canny_second_threshold();
  inline void set_has_filters_canny_aperturesize();
  inline void clear_has_filters_canny_aperturesize();
  inline void set_has_have_red();
  inline void clear_has_have_red();
  inline void set_has_have_blue();
  inline void clear_has_have_blue();
  inline void set_has_have_green();
  inline void clear_has_have_green();
  inline void set_has_have_yellow();
  inline void clear_has_have_yellow();
  inline void set_has_have_violet();
  inline void clear_has_have_violet();
  inline void set_has_have_cyan();
  inline void clear_has_have_cyan();
  inline void set_has_have_black();
  inline void clear_has_have_black();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 input_white_balance_blue_u_;
  ::google::protobuf::int64 input_white_balance_red_v_;
  ::google::protobuf::int64 input_exposure_;
  ::google::protobuf::int64 input_brightness_;
  ::google::protobuf::int64 input_gain_;
  ::std::string* input_network_ip_;
  ::std::string* input_network_port_;
  ::google::protobuf::int32 input_sharpness_;
  bool input_edit_camera_setting_;
  bool filters_crop_photo_;
  bool filters_median_blur_;
  bool filters_adaptive_threshold_;
  ::std::string* filters_crop_firstpoint_x_;
  ::std::string* filters_crop_firstpoint_y_;
  ::std::string* filters_crop_secondpoint_x_;
  ::std::string* filters_crop_secondpoint_y_;
  ::std::string* filters_median_blur_kernelsize_;
  ::google::protobuf::int64 filters_adaptive_threshold_blocksize_;
  ::google::protobuf::int64 filters_adaptive_threshold_c_;
  ::google::protobuf::int64 filters_threshold_value_;
  ::std::string* filters_dilationsize_;
  ::google::protobuf::int64 filters_canny_first_threshold_;
  ::google::protobuf::int64 filters_canny_second_threshold_;
  ::std::string* filters_canny_aperturesize_;
  bool filters_threshold_;
  bool filters_dilate_;
  bool filters_canny_;
  bool have_red_;
  bool have_blue_;
  bool have_green_;
  bool have_yellow_;
  bool have_violet_;
  ::google::protobuf::RepeatedPtrField< ::SystemSettings_color > red_instances_;
  ::google::protobuf::RepeatedPtrField< ::SystemSettings_color > blue_instances_;
  ::google::protobuf::RepeatedPtrField< ::SystemSettings_color > green_instances_;
  ::google::protobuf::RepeatedPtrField< ::SystemSettings_color > yellow_instances_;
  ::google::protobuf::RepeatedPtrField< ::SystemSettings_color > violet_instances_;
  ::google::protobuf::RepeatedPtrField< ::SystemSettings_color > cyan_instances_;
  ::google::protobuf::RepeatedPtrField< ::SystemSettings_color > black_instances_;
  bool have_cyan_;
  bool have_black_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(41 + 31) / 32];
  
  friend void  protobuf_AddDesc_SystemSettings_2eproto();
  friend void protobuf_AssignDesc_SystemSettings_2eproto();
  friend void protobuf_ShutdownFile_SystemSettings_2eproto();
  
  void InitAsDefaultInstance();
  static SystemSettings* default_instance_;
};
// ===================================================================


// ===================================================================

// SystemSettings_color

// required float min_hue = 1;
inline bool SystemSettings_color::has_min_hue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemSettings_color::set_has_min_hue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemSettings_color::clear_has_min_hue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemSettings_color::clear_min_hue() {
  min_hue_ = 0;
  clear_has_min_hue();
}
inline float SystemSettings_color::min_hue() const {
  return min_hue_;
}
inline void SystemSettings_color::set_min_hue(float value) {
  set_has_min_hue();
  min_hue_ = value;
}

// required float max_hue = 2;
inline bool SystemSettings_color::has_max_hue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemSettings_color::set_has_max_hue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SystemSettings_color::clear_has_max_hue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SystemSettings_color::clear_max_hue() {
  max_hue_ = 0;
  clear_has_max_hue();
}
inline float SystemSettings_color::max_hue() const {
  return max_hue_;
}
inline void SystemSettings_color::set_max_hue(float value) {
  set_has_max_hue();
  max_hue_ = value;
}

// -------------------------------------------------------------------

// SystemSettings

// required bool input_edit_camera_setting = 1;
inline bool SystemSettings::has_input_edit_camera_setting() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemSettings::set_has_input_edit_camera_setting() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemSettings::clear_has_input_edit_camera_setting() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemSettings::clear_input_edit_camera_setting() {
  input_edit_camera_setting_ = false;
  clear_has_input_edit_camera_setting();
}
inline bool SystemSettings::input_edit_camera_setting() const {
  return input_edit_camera_setting_;
}
inline void SystemSettings::set_input_edit_camera_setting(bool value) {
  set_has_input_edit_camera_setting();
  input_edit_camera_setting_ = value;
}

// required int64 input_WHITE_BALANCE_BLUE_U = 2;
inline bool SystemSettings::has_input_white_balance_blue_u() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemSettings::set_has_input_white_balance_blue_u() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SystemSettings::clear_has_input_white_balance_blue_u() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SystemSettings::clear_input_white_balance_blue_u() {
  input_white_balance_blue_u_ = GOOGLE_LONGLONG(0);
  clear_has_input_white_balance_blue_u();
}
inline ::google::protobuf::int64 SystemSettings::input_white_balance_blue_u() const {
  return input_white_balance_blue_u_;
}
inline void SystemSettings::set_input_white_balance_blue_u(::google::protobuf::int64 value) {
  set_has_input_white_balance_blue_u();
  input_white_balance_blue_u_ = value;
}

// required int64 input_WHITE_BALANCE_RED_V = 3;
inline bool SystemSettings::has_input_white_balance_red_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemSettings::set_has_input_white_balance_red_v() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SystemSettings::clear_has_input_white_balance_red_v() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SystemSettings::clear_input_white_balance_red_v() {
  input_white_balance_red_v_ = GOOGLE_LONGLONG(0);
  clear_has_input_white_balance_red_v();
}
inline ::google::protobuf::int64 SystemSettings::input_white_balance_red_v() const {
  return input_white_balance_red_v_;
}
inline void SystemSettings::set_input_white_balance_red_v(::google::protobuf::int64 value) {
  set_has_input_white_balance_red_v();
  input_white_balance_red_v_ = value;
}

// required int64 input_EXPOSURE = 4;
inline bool SystemSettings::has_input_exposure() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemSettings::set_has_input_exposure() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SystemSettings::clear_has_input_exposure() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SystemSettings::clear_input_exposure() {
  input_exposure_ = GOOGLE_LONGLONG(0);
  clear_has_input_exposure();
}
inline ::google::protobuf::int64 SystemSettings::input_exposure() const {
  return input_exposure_;
}
inline void SystemSettings::set_input_exposure(::google::protobuf::int64 value) {
  set_has_input_exposure();
  input_exposure_ = value;
}

// required int64 input_BRIGHTNESS = 5;
inline bool SystemSettings::has_input_brightness() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemSettings::set_has_input_brightness() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SystemSettings::clear_has_input_brightness() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SystemSettings::clear_input_brightness() {
  input_brightness_ = GOOGLE_LONGLONG(0);
  clear_has_input_brightness();
}
inline ::google::protobuf::int64 SystemSettings::input_brightness() const {
  return input_brightness_;
}
inline void SystemSettings::set_input_brightness(::google::protobuf::int64 value) {
  set_has_input_brightness();
  input_brightness_ = value;
}

// required int32 input_SHARPNESS = 6;
inline bool SystemSettings::has_input_sharpness() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemSettings::set_has_input_sharpness() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SystemSettings::clear_has_input_sharpness() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SystemSettings::clear_input_sharpness() {
  input_sharpness_ = 0;
  clear_has_input_sharpness();
}
inline ::google::protobuf::int32 SystemSettings::input_sharpness() const {
  return input_sharpness_;
}
inline void SystemSettings::set_input_sharpness(::google::protobuf::int32 value) {
  set_has_input_sharpness();
  input_sharpness_ = value;
}

// required int64 input_GAIN = 7;
inline bool SystemSettings::has_input_gain() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemSettings::set_has_input_gain() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SystemSettings::clear_has_input_gain() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SystemSettings::clear_input_gain() {
  input_gain_ = GOOGLE_LONGLONG(0);
  clear_has_input_gain();
}
inline ::google::protobuf::int64 SystemSettings::input_gain() const {
  return input_gain_;
}
inline void SystemSettings::set_input_gain(::google::protobuf::int64 value) {
  set_has_input_gain();
  input_gain_ = value;
}

// required string input_network_ip = 8;
inline bool SystemSettings::has_input_network_ip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SystemSettings::set_has_input_network_ip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SystemSettings::clear_has_input_network_ip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SystemSettings::clear_input_network_ip() {
  if (input_network_ip_ != &::google::protobuf::internal::kEmptyString) {
    input_network_ip_->clear();
  }
  clear_has_input_network_ip();
}
inline const ::std::string& SystemSettings::input_network_ip() const {
  return *input_network_ip_;
}
inline void SystemSettings::set_input_network_ip(const ::std::string& value) {
  set_has_input_network_ip();
  if (input_network_ip_ == &::google::protobuf::internal::kEmptyString) {
    input_network_ip_ = new ::std::string;
  }
  input_network_ip_->assign(value);
}
inline void SystemSettings::set_input_network_ip(const char* value) {
  set_has_input_network_ip();
  if (input_network_ip_ == &::google::protobuf::internal::kEmptyString) {
    input_network_ip_ = new ::std::string;
  }
  input_network_ip_->assign(value);
}
inline void SystemSettings::set_input_network_ip(const char* value, size_t size) {
  set_has_input_network_ip();
  if (input_network_ip_ == &::google::protobuf::internal::kEmptyString) {
    input_network_ip_ = new ::std::string;
  }
  input_network_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemSettings::mutable_input_network_ip() {
  set_has_input_network_ip();
  if (input_network_ip_ == &::google::protobuf::internal::kEmptyString) {
    input_network_ip_ = new ::std::string;
  }
  return input_network_ip_;
}
inline ::std::string* SystemSettings::release_input_network_ip() {
  clear_has_input_network_ip();
  if (input_network_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = input_network_ip_;
    input_network_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string input_network_port = 9;
inline bool SystemSettings::has_input_network_port() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SystemSettings::set_has_input_network_port() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SystemSettings::clear_has_input_network_port() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SystemSettings::clear_input_network_port() {
  if (input_network_port_ != &::google::protobuf::internal::kEmptyString) {
    input_network_port_->clear();
  }
  clear_has_input_network_port();
}
inline const ::std::string& SystemSettings::input_network_port() const {
  return *input_network_port_;
}
inline void SystemSettings::set_input_network_port(const ::std::string& value) {
  set_has_input_network_port();
  if (input_network_port_ == &::google::protobuf::internal::kEmptyString) {
    input_network_port_ = new ::std::string;
  }
  input_network_port_->assign(value);
}
inline void SystemSettings::set_input_network_port(const char* value) {
  set_has_input_network_port();
  if (input_network_port_ == &::google::protobuf::internal::kEmptyString) {
    input_network_port_ = new ::std::string;
  }
  input_network_port_->assign(value);
}
inline void SystemSettings::set_input_network_port(const char* value, size_t size) {
  set_has_input_network_port();
  if (input_network_port_ == &::google::protobuf::internal::kEmptyString) {
    input_network_port_ = new ::std::string;
  }
  input_network_port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemSettings::mutable_input_network_port() {
  set_has_input_network_port();
  if (input_network_port_ == &::google::protobuf::internal::kEmptyString) {
    input_network_port_ = new ::std::string;
  }
  return input_network_port_;
}
inline ::std::string* SystemSettings::release_input_network_port() {
  clear_has_input_network_port();
  if (input_network_port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = input_network_port_;
    input_network_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool filters_crop_photo = 10;
inline bool SystemSettings::has_filters_crop_photo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SystemSettings::set_has_filters_crop_photo() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SystemSettings::clear_has_filters_crop_photo() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SystemSettings::clear_filters_crop_photo() {
  filters_crop_photo_ = false;
  clear_has_filters_crop_photo();
}
inline bool SystemSettings::filters_crop_photo() const {
  return filters_crop_photo_;
}
inline void SystemSettings::set_filters_crop_photo(bool value) {
  set_has_filters_crop_photo();
  filters_crop_photo_ = value;
}

// required string filters_crop_firstPoint_x = 11;
inline bool SystemSettings::has_filters_crop_firstpoint_x() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SystemSettings::set_has_filters_crop_firstpoint_x() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SystemSettings::clear_has_filters_crop_firstpoint_x() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SystemSettings::clear_filters_crop_firstpoint_x() {
  if (filters_crop_firstpoint_x_ != &::google::protobuf::internal::kEmptyString) {
    filters_crop_firstpoint_x_->clear();
  }
  clear_has_filters_crop_firstpoint_x();
}
inline const ::std::string& SystemSettings::filters_crop_firstpoint_x() const {
  return *filters_crop_firstpoint_x_;
}
inline void SystemSettings::set_filters_crop_firstpoint_x(const ::std::string& value) {
  set_has_filters_crop_firstpoint_x();
  if (filters_crop_firstpoint_x_ == &::google::protobuf::internal::kEmptyString) {
    filters_crop_firstpoint_x_ = new ::std::string;
  }
  filters_crop_firstpoint_x_->assign(value);
}
inline void SystemSettings::set_filters_crop_firstpoint_x(const char* value) {
  set_has_filters_crop_firstpoint_x();
  if (filters_crop_firstpoint_x_ == &::google::protobuf::internal::kEmptyString) {
    filters_crop_firstpoint_x_ = new ::std::string;
  }
  filters_crop_firstpoint_x_->assign(value);
}
inline void SystemSettings::set_filters_crop_firstpoint_x(const char* value, size_t size) {
  set_has_filters_crop_firstpoint_x();
  if (filters_crop_firstpoint_x_ == &::google::protobuf::internal::kEmptyString) {
    filters_crop_firstpoint_x_ = new ::std::string;
  }
  filters_crop_firstpoint_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemSettings::mutable_filters_crop_firstpoint_x() {
  set_has_filters_crop_firstpoint_x();
  if (filters_crop_firstpoint_x_ == &::google::protobuf::internal::kEmptyString) {
    filters_crop_firstpoint_x_ = new ::std::string;
  }
  return filters_crop_firstpoint_x_;
}
inline ::std::string* SystemSettings::release_filters_crop_firstpoint_x() {
  clear_has_filters_crop_firstpoint_x();
  if (filters_crop_firstpoint_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filters_crop_firstpoint_x_;
    filters_crop_firstpoint_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string filters_crop_firstPoint_y = 12;
inline bool SystemSettings::has_filters_crop_firstpoint_y() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SystemSettings::set_has_filters_crop_firstpoint_y() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SystemSettings::clear_has_filters_crop_firstpoint_y() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SystemSettings::clear_filters_crop_firstpoint_y() {
  if (filters_crop_firstpoint_y_ != &::google::protobuf::internal::kEmptyString) {
    filters_crop_firstpoint_y_->clear();
  }
  clear_has_filters_crop_firstpoint_y();
}
inline const ::std::string& SystemSettings::filters_crop_firstpoint_y() const {
  return *filters_crop_firstpoint_y_;
}
inline void SystemSettings::set_filters_crop_firstpoint_y(const ::std::string& value) {
  set_has_filters_crop_firstpoint_y();
  if (filters_crop_firstpoint_y_ == &::google::protobuf::internal::kEmptyString) {
    filters_crop_firstpoint_y_ = new ::std::string;
  }
  filters_crop_firstpoint_y_->assign(value);
}
inline void SystemSettings::set_filters_crop_firstpoint_y(const char* value) {
  set_has_filters_crop_firstpoint_y();
  if (filters_crop_firstpoint_y_ == &::google::protobuf::internal::kEmptyString) {
    filters_crop_firstpoint_y_ = new ::std::string;
  }
  filters_crop_firstpoint_y_->assign(value);
}
inline void SystemSettings::set_filters_crop_firstpoint_y(const char* value, size_t size) {
  set_has_filters_crop_firstpoint_y();
  if (filters_crop_firstpoint_y_ == &::google::protobuf::internal::kEmptyString) {
    filters_crop_firstpoint_y_ = new ::std::string;
  }
  filters_crop_firstpoint_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemSettings::mutable_filters_crop_firstpoint_y() {
  set_has_filters_crop_firstpoint_y();
  if (filters_crop_firstpoint_y_ == &::google::protobuf::internal::kEmptyString) {
    filters_crop_firstpoint_y_ = new ::std::string;
  }
  return filters_crop_firstpoint_y_;
}
inline ::std::string* SystemSettings::release_filters_crop_firstpoint_y() {
  clear_has_filters_crop_firstpoint_y();
  if (filters_crop_firstpoint_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filters_crop_firstpoint_y_;
    filters_crop_firstpoint_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string filters_crop_secondPoint_x = 13;
inline bool SystemSettings::has_filters_crop_secondpoint_x() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SystemSettings::set_has_filters_crop_secondpoint_x() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SystemSettings::clear_has_filters_crop_secondpoint_x() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SystemSettings::clear_filters_crop_secondpoint_x() {
  if (filters_crop_secondpoint_x_ != &::google::protobuf::internal::kEmptyString) {
    filters_crop_secondpoint_x_->clear();
  }
  clear_has_filters_crop_secondpoint_x();
}
inline const ::std::string& SystemSettings::filters_crop_secondpoint_x() const {
  return *filters_crop_secondpoint_x_;
}
inline void SystemSettings::set_filters_crop_secondpoint_x(const ::std::string& value) {
  set_has_filters_crop_secondpoint_x();
  if (filters_crop_secondpoint_x_ == &::google::protobuf::internal::kEmptyString) {
    filters_crop_secondpoint_x_ = new ::std::string;
  }
  filters_crop_secondpoint_x_->assign(value);
}
inline void SystemSettings::set_filters_crop_secondpoint_x(const char* value) {
  set_has_filters_crop_secondpoint_x();
  if (filters_crop_secondpoint_x_ == &::google::protobuf::internal::kEmptyString) {
    filters_crop_secondpoint_x_ = new ::std::string;
  }
  filters_crop_secondpoint_x_->assign(value);
}
inline void SystemSettings::set_filters_crop_secondpoint_x(const char* value, size_t size) {
  set_has_filters_crop_secondpoint_x();
  if (filters_crop_secondpoint_x_ == &::google::protobuf::internal::kEmptyString) {
    filters_crop_secondpoint_x_ = new ::std::string;
  }
  filters_crop_secondpoint_x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemSettings::mutable_filters_crop_secondpoint_x() {
  set_has_filters_crop_secondpoint_x();
  if (filters_crop_secondpoint_x_ == &::google::protobuf::internal::kEmptyString) {
    filters_crop_secondpoint_x_ = new ::std::string;
  }
  return filters_crop_secondpoint_x_;
}
inline ::std::string* SystemSettings::release_filters_crop_secondpoint_x() {
  clear_has_filters_crop_secondpoint_x();
  if (filters_crop_secondpoint_x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filters_crop_secondpoint_x_;
    filters_crop_secondpoint_x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string filters_crop_secondPoint_y = 14;
inline bool SystemSettings::has_filters_crop_secondpoint_y() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SystemSettings::set_has_filters_crop_secondpoint_y() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SystemSettings::clear_has_filters_crop_secondpoint_y() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SystemSettings::clear_filters_crop_secondpoint_y() {
  if (filters_crop_secondpoint_y_ != &::google::protobuf::internal::kEmptyString) {
    filters_crop_secondpoint_y_->clear();
  }
  clear_has_filters_crop_secondpoint_y();
}
inline const ::std::string& SystemSettings::filters_crop_secondpoint_y() const {
  return *filters_crop_secondpoint_y_;
}
inline void SystemSettings::set_filters_crop_secondpoint_y(const ::std::string& value) {
  set_has_filters_crop_secondpoint_y();
  if (filters_crop_secondpoint_y_ == &::google::protobuf::internal::kEmptyString) {
    filters_crop_secondpoint_y_ = new ::std::string;
  }
  filters_crop_secondpoint_y_->assign(value);
}
inline void SystemSettings::set_filters_crop_secondpoint_y(const char* value) {
  set_has_filters_crop_secondpoint_y();
  if (filters_crop_secondpoint_y_ == &::google::protobuf::internal::kEmptyString) {
    filters_crop_secondpoint_y_ = new ::std::string;
  }
  filters_crop_secondpoint_y_->assign(value);
}
inline void SystemSettings::set_filters_crop_secondpoint_y(const char* value, size_t size) {
  set_has_filters_crop_secondpoint_y();
  if (filters_crop_secondpoint_y_ == &::google::protobuf::internal::kEmptyString) {
    filters_crop_secondpoint_y_ = new ::std::string;
  }
  filters_crop_secondpoint_y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemSettings::mutable_filters_crop_secondpoint_y() {
  set_has_filters_crop_secondpoint_y();
  if (filters_crop_secondpoint_y_ == &::google::protobuf::internal::kEmptyString) {
    filters_crop_secondpoint_y_ = new ::std::string;
  }
  return filters_crop_secondpoint_y_;
}
inline ::std::string* SystemSettings::release_filters_crop_secondpoint_y() {
  clear_has_filters_crop_secondpoint_y();
  if (filters_crop_secondpoint_y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filters_crop_secondpoint_y_;
    filters_crop_secondpoint_y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool filters_median_blur = 15;
inline bool SystemSettings::has_filters_median_blur() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SystemSettings::set_has_filters_median_blur() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SystemSettings::clear_has_filters_median_blur() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SystemSettings::clear_filters_median_blur() {
  filters_median_blur_ = false;
  clear_has_filters_median_blur();
}
inline bool SystemSettings::filters_median_blur() const {
  return filters_median_blur_;
}
inline void SystemSettings::set_filters_median_blur(bool value) {
  set_has_filters_median_blur();
  filters_median_blur_ = value;
}

// required string filters_median_blur_kernelSize = 16;
inline bool SystemSettings::has_filters_median_blur_kernelsize() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SystemSettings::set_has_filters_median_blur_kernelsize() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SystemSettings::clear_has_filters_median_blur_kernelsize() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SystemSettings::clear_filters_median_blur_kernelsize() {
  if (filters_median_blur_kernelsize_ != &::google::protobuf::internal::kEmptyString) {
    filters_median_blur_kernelsize_->clear();
  }
  clear_has_filters_median_blur_kernelsize();
}
inline const ::std::string& SystemSettings::filters_median_blur_kernelsize() const {
  return *filters_median_blur_kernelsize_;
}
inline void SystemSettings::set_filters_median_blur_kernelsize(const ::std::string& value) {
  set_has_filters_median_blur_kernelsize();
  if (filters_median_blur_kernelsize_ == &::google::protobuf::internal::kEmptyString) {
    filters_median_blur_kernelsize_ = new ::std::string;
  }
  filters_median_blur_kernelsize_->assign(value);
}
inline void SystemSettings::set_filters_median_blur_kernelsize(const char* value) {
  set_has_filters_median_blur_kernelsize();
  if (filters_median_blur_kernelsize_ == &::google::protobuf::internal::kEmptyString) {
    filters_median_blur_kernelsize_ = new ::std::string;
  }
  filters_median_blur_kernelsize_->assign(value);
}
inline void SystemSettings::set_filters_median_blur_kernelsize(const char* value, size_t size) {
  set_has_filters_median_blur_kernelsize();
  if (filters_median_blur_kernelsize_ == &::google::protobuf::internal::kEmptyString) {
    filters_median_blur_kernelsize_ = new ::std::string;
  }
  filters_median_blur_kernelsize_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemSettings::mutable_filters_median_blur_kernelsize() {
  set_has_filters_median_blur_kernelsize();
  if (filters_median_blur_kernelsize_ == &::google::protobuf::internal::kEmptyString) {
    filters_median_blur_kernelsize_ = new ::std::string;
  }
  return filters_median_blur_kernelsize_;
}
inline ::std::string* SystemSettings::release_filters_median_blur_kernelsize() {
  clear_has_filters_median_blur_kernelsize();
  if (filters_median_blur_kernelsize_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filters_median_blur_kernelsize_;
    filters_median_blur_kernelsize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool filters_Adaptive_threshold = 17;
inline bool SystemSettings::has_filters_adaptive_threshold() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SystemSettings::set_has_filters_adaptive_threshold() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SystemSettings::clear_has_filters_adaptive_threshold() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SystemSettings::clear_filters_adaptive_threshold() {
  filters_adaptive_threshold_ = false;
  clear_has_filters_adaptive_threshold();
}
inline bool SystemSettings::filters_adaptive_threshold() const {
  return filters_adaptive_threshold_;
}
inline void SystemSettings::set_filters_adaptive_threshold(bool value) {
  set_has_filters_adaptive_threshold();
  filters_adaptive_threshold_ = value;
}

// required int64 filters_Adaptive_threshold_blockSize = 18;
inline bool SystemSettings::has_filters_adaptive_threshold_blocksize() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SystemSettings::set_has_filters_adaptive_threshold_blocksize() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SystemSettings::clear_has_filters_adaptive_threshold_blocksize() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SystemSettings::clear_filters_adaptive_threshold_blocksize() {
  filters_adaptive_threshold_blocksize_ = GOOGLE_LONGLONG(0);
  clear_has_filters_adaptive_threshold_blocksize();
}
inline ::google::protobuf::int64 SystemSettings::filters_adaptive_threshold_blocksize() const {
  return filters_adaptive_threshold_blocksize_;
}
inline void SystemSettings::set_filters_adaptive_threshold_blocksize(::google::protobuf::int64 value) {
  set_has_filters_adaptive_threshold_blocksize();
  filters_adaptive_threshold_blocksize_ = value;
}

// required int64 filters_Adaptive_threshold_C = 19;
inline bool SystemSettings::has_filters_adaptive_threshold_c() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SystemSettings::set_has_filters_adaptive_threshold_c() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SystemSettings::clear_has_filters_adaptive_threshold_c() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SystemSettings::clear_filters_adaptive_threshold_c() {
  filters_adaptive_threshold_c_ = GOOGLE_LONGLONG(0);
  clear_has_filters_adaptive_threshold_c();
}
inline ::google::protobuf::int64 SystemSettings::filters_adaptive_threshold_c() const {
  return filters_adaptive_threshold_c_;
}
inline void SystemSettings::set_filters_adaptive_threshold_c(::google::protobuf::int64 value) {
  set_has_filters_adaptive_threshold_c();
  filters_adaptive_threshold_c_ = value;
}

// required bool filters_Threshold = 20;
inline bool SystemSettings::has_filters_threshold() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SystemSettings::set_has_filters_threshold() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SystemSettings::clear_has_filters_threshold() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SystemSettings::clear_filters_threshold() {
  filters_threshold_ = false;
  clear_has_filters_threshold();
}
inline bool SystemSettings::filters_threshold() const {
  return filters_threshold_;
}
inline void SystemSettings::set_filters_threshold(bool value) {
  set_has_filters_threshold();
  filters_threshold_ = value;
}

// required int64 filters_Threshold_value = 21;
inline bool SystemSettings::has_filters_threshold_value() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SystemSettings::set_has_filters_threshold_value() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SystemSettings::clear_has_filters_threshold_value() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SystemSettings::clear_filters_threshold_value() {
  filters_threshold_value_ = GOOGLE_LONGLONG(0);
  clear_has_filters_threshold_value();
}
inline ::google::protobuf::int64 SystemSettings::filters_threshold_value() const {
  return filters_threshold_value_;
}
inline void SystemSettings::set_filters_threshold_value(::google::protobuf::int64 value) {
  set_has_filters_threshold_value();
  filters_threshold_value_ = value;
}

// required bool filters_dilate = 22;
inline bool SystemSettings::has_filters_dilate() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SystemSettings::set_has_filters_dilate() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SystemSettings::clear_has_filters_dilate() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SystemSettings::clear_filters_dilate() {
  filters_dilate_ = false;
  clear_has_filters_dilate();
}
inline bool SystemSettings::filters_dilate() const {
  return filters_dilate_;
}
inline void SystemSettings::set_filters_dilate(bool value) {
  set_has_filters_dilate();
  filters_dilate_ = value;
}

// required string filters_dilationSize = 23;
inline bool SystemSettings::has_filters_dilationsize() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SystemSettings::set_has_filters_dilationsize() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SystemSettings::clear_has_filters_dilationsize() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SystemSettings::clear_filters_dilationsize() {
  if (filters_dilationsize_ != &::google::protobuf::internal::kEmptyString) {
    filters_dilationsize_->clear();
  }
  clear_has_filters_dilationsize();
}
inline const ::std::string& SystemSettings::filters_dilationsize() const {
  return *filters_dilationsize_;
}
inline void SystemSettings::set_filters_dilationsize(const ::std::string& value) {
  set_has_filters_dilationsize();
  if (filters_dilationsize_ == &::google::protobuf::internal::kEmptyString) {
    filters_dilationsize_ = new ::std::string;
  }
  filters_dilationsize_->assign(value);
}
inline void SystemSettings::set_filters_dilationsize(const char* value) {
  set_has_filters_dilationsize();
  if (filters_dilationsize_ == &::google::protobuf::internal::kEmptyString) {
    filters_dilationsize_ = new ::std::string;
  }
  filters_dilationsize_->assign(value);
}
inline void SystemSettings::set_filters_dilationsize(const char* value, size_t size) {
  set_has_filters_dilationsize();
  if (filters_dilationsize_ == &::google::protobuf::internal::kEmptyString) {
    filters_dilationsize_ = new ::std::string;
  }
  filters_dilationsize_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemSettings::mutable_filters_dilationsize() {
  set_has_filters_dilationsize();
  if (filters_dilationsize_ == &::google::protobuf::internal::kEmptyString) {
    filters_dilationsize_ = new ::std::string;
  }
  return filters_dilationsize_;
}
inline ::std::string* SystemSettings::release_filters_dilationsize() {
  clear_has_filters_dilationsize();
  if (filters_dilationsize_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filters_dilationsize_;
    filters_dilationsize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool filters_Canny = 24;
inline bool SystemSettings::has_filters_canny() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SystemSettings::set_has_filters_canny() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SystemSettings::clear_has_filters_canny() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SystemSettings::clear_filters_canny() {
  filters_canny_ = false;
  clear_has_filters_canny();
}
inline bool SystemSettings::filters_canny() const {
  return filters_canny_;
}
inline void SystemSettings::set_filters_canny(bool value) {
  set_has_filters_canny();
  filters_canny_ = value;
}

// required int64 filters_Canny_First_Threshold = 25;
inline bool SystemSettings::has_filters_canny_first_threshold() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SystemSettings::set_has_filters_canny_first_threshold() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SystemSettings::clear_has_filters_canny_first_threshold() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SystemSettings::clear_filters_canny_first_threshold() {
  filters_canny_first_threshold_ = GOOGLE_LONGLONG(0);
  clear_has_filters_canny_first_threshold();
}
inline ::google::protobuf::int64 SystemSettings::filters_canny_first_threshold() const {
  return filters_canny_first_threshold_;
}
inline void SystemSettings::set_filters_canny_first_threshold(::google::protobuf::int64 value) {
  set_has_filters_canny_first_threshold();
  filters_canny_first_threshold_ = value;
}

// required int64 filters_Canny_Second_Threshold = 26;
inline bool SystemSettings::has_filters_canny_second_threshold() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SystemSettings::set_has_filters_canny_second_threshold() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SystemSettings::clear_has_filters_canny_second_threshold() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SystemSettings::clear_filters_canny_second_threshold() {
  filters_canny_second_threshold_ = GOOGLE_LONGLONG(0);
  clear_has_filters_canny_second_threshold();
}
inline ::google::protobuf::int64 SystemSettings::filters_canny_second_threshold() const {
  return filters_canny_second_threshold_;
}
inline void SystemSettings::set_filters_canny_second_threshold(::google::protobuf::int64 value) {
  set_has_filters_canny_second_threshold();
  filters_canny_second_threshold_ = value;
}

// required string filters_Canny_apertureSize = 27;
inline bool SystemSettings::has_filters_canny_aperturesize() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SystemSettings::set_has_filters_canny_aperturesize() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SystemSettings::clear_has_filters_canny_aperturesize() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SystemSettings::clear_filters_canny_aperturesize() {
  if (filters_canny_aperturesize_ != &::google::protobuf::internal::kEmptyString) {
    filters_canny_aperturesize_->clear();
  }
  clear_has_filters_canny_aperturesize();
}
inline const ::std::string& SystemSettings::filters_canny_aperturesize() const {
  return *filters_canny_aperturesize_;
}
inline void SystemSettings::set_filters_canny_aperturesize(const ::std::string& value) {
  set_has_filters_canny_aperturesize();
  if (filters_canny_aperturesize_ == &::google::protobuf::internal::kEmptyString) {
    filters_canny_aperturesize_ = new ::std::string;
  }
  filters_canny_aperturesize_->assign(value);
}
inline void SystemSettings::set_filters_canny_aperturesize(const char* value) {
  set_has_filters_canny_aperturesize();
  if (filters_canny_aperturesize_ == &::google::protobuf::internal::kEmptyString) {
    filters_canny_aperturesize_ = new ::std::string;
  }
  filters_canny_aperturesize_->assign(value);
}
inline void SystemSettings::set_filters_canny_aperturesize(const char* value, size_t size) {
  set_has_filters_canny_aperturesize();
  if (filters_canny_aperturesize_ == &::google::protobuf::internal::kEmptyString) {
    filters_canny_aperturesize_ = new ::std::string;
  }
  filters_canny_aperturesize_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemSettings::mutable_filters_canny_aperturesize() {
  set_has_filters_canny_aperturesize();
  if (filters_canny_aperturesize_ == &::google::protobuf::internal::kEmptyString) {
    filters_canny_aperturesize_ = new ::std::string;
  }
  return filters_canny_aperturesize_;
}
inline ::std::string* SystemSettings::release_filters_canny_aperturesize() {
  clear_has_filters_canny_aperturesize();
  if (filters_canny_aperturesize_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filters_canny_aperturesize_;
    filters_canny_aperturesize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool have_red = 28;
inline bool SystemSettings::has_have_red() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SystemSettings::set_has_have_red() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SystemSettings::clear_has_have_red() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SystemSettings::clear_have_red() {
  have_red_ = false;
  clear_has_have_red();
}
inline bool SystemSettings::have_red() const {
  return have_red_;
}
inline void SystemSettings::set_have_red(bool value) {
  set_has_have_red();
  have_red_ = value;
}

// repeated .SystemSettings.color red_instances = 29;
inline int SystemSettings::red_instances_size() const {
  return red_instances_.size();
}
inline void SystemSettings::clear_red_instances() {
  red_instances_.Clear();
}
inline const ::SystemSettings_color& SystemSettings::red_instances(int index) const {
  return red_instances_.Get(index);
}
inline ::SystemSettings_color* SystemSettings::mutable_red_instances(int index) {
  return red_instances_.Mutable(index);
}
inline ::SystemSettings_color* SystemSettings::add_red_instances() {
  return red_instances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >&
SystemSettings::red_instances() const {
  return red_instances_;
}
inline ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >*
SystemSettings::mutable_red_instances() {
  return &red_instances_;
}

// required bool have_blue = 30;
inline bool SystemSettings::has_have_blue() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SystemSettings::set_has_have_blue() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SystemSettings::clear_has_have_blue() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SystemSettings::clear_have_blue() {
  have_blue_ = false;
  clear_has_have_blue();
}
inline bool SystemSettings::have_blue() const {
  return have_blue_;
}
inline void SystemSettings::set_have_blue(bool value) {
  set_has_have_blue();
  have_blue_ = value;
}

// repeated .SystemSettings.color blue_instances = 31;
inline int SystemSettings::blue_instances_size() const {
  return blue_instances_.size();
}
inline void SystemSettings::clear_blue_instances() {
  blue_instances_.Clear();
}
inline const ::SystemSettings_color& SystemSettings::blue_instances(int index) const {
  return blue_instances_.Get(index);
}
inline ::SystemSettings_color* SystemSettings::mutable_blue_instances(int index) {
  return blue_instances_.Mutable(index);
}
inline ::SystemSettings_color* SystemSettings::add_blue_instances() {
  return blue_instances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >&
SystemSettings::blue_instances() const {
  return blue_instances_;
}
inline ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >*
SystemSettings::mutable_blue_instances() {
  return &blue_instances_;
}

// required bool have_green = 32;
inline bool SystemSettings::has_have_green() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SystemSettings::set_has_have_green() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SystemSettings::clear_has_have_green() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SystemSettings::clear_have_green() {
  have_green_ = false;
  clear_has_have_green();
}
inline bool SystemSettings::have_green() const {
  return have_green_;
}
inline void SystemSettings::set_have_green(bool value) {
  set_has_have_green();
  have_green_ = value;
}

// repeated .SystemSettings.color green_instances = 33;
inline int SystemSettings::green_instances_size() const {
  return green_instances_.size();
}
inline void SystemSettings::clear_green_instances() {
  green_instances_.Clear();
}
inline const ::SystemSettings_color& SystemSettings::green_instances(int index) const {
  return green_instances_.Get(index);
}
inline ::SystemSettings_color* SystemSettings::mutable_green_instances(int index) {
  return green_instances_.Mutable(index);
}
inline ::SystemSettings_color* SystemSettings::add_green_instances() {
  return green_instances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >&
SystemSettings::green_instances() const {
  return green_instances_;
}
inline ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >*
SystemSettings::mutable_green_instances() {
  return &green_instances_;
}

// required bool have_yellow = 34;
inline bool SystemSettings::has_have_yellow() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SystemSettings::set_has_have_yellow() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SystemSettings::clear_has_have_yellow() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SystemSettings::clear_have_yellow() {
  have_yellow_ = false;
  clear_has_have_yellow();
}
inline bool SystemSettings::have_yellow() const {
  return have_yellow_;
}
inline void SystemSettings::set_have_yellow(bool value) {
  set_has_have_yellow();
  have_yellow_ = value;
}

// repeated .SystemSettings.color yellow_instances = 35;
inline int SystemSettings::yellow_instances_size() const {
  return yellow_instances_.size();
}
inline void SystemSettings::clear_yellow_instances() {
  yellow_instances_.Clear();
}
inline const ::SystemSettings_color& SystemSettings::yellow_instances(int index) const {
  return yellow_instances_.Get(index);
}
inline ::SystemSettings_color* SystemSettings::mutable_yellow_instances(int index) {
  return yellow_instances_.Mutable(index);
}
inline ::SystemSettings_color* SystemSettings::add_yellow_instances() {
  return yellow_instances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >&
SystemSettings::yellow_instances() const {
  return yellow_instances_;
}
inline ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >*
SystemSettings::mutable_yellow_instances() {
  return &yellow_instances_;
}

// required bool have_violet = 36;
inline bool SystemSettings::has_have_violet() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SystemSettings::set_has_have_violet() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SystemSettings::clear_has_have_violet() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SystemSettings::clear_have_violet() {
  have_violet_ = false;
  clear_has_have_violet();
}
inline bool SystemSettings::have_violet() const {
  return have_violet_;
}
inline void SystemSettings::set_have_violet(bool value) {
  set_has_have_violet();
  have_violet_ = value;
}

// repeated .SystemSettings.color violet_instances = 37;
inline int SystemSettings::violet_instances_size() const {
  return violet_instances_.size();
}
inline void SystemSettings::clear_violet_instances() {
  violet_instances_.Clear();
}
inline const ::SystemSettings_color& SystemSettings::violet_instances(int index) const {
  return violet_instances_.Get(index);
}
inline ::SystemSettings_color* SystemSettings::mutable_violet_instances(int index) {
  return violet_instances_.Mutable(index);
}
inline ::SystemSettings_color* SystemSettings::add_violet_instances() {
  return violet_instances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >&
SystemSettings::violet_instances() const {
  return violet_instances_;
}
inline ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >*
SystemSettings::mutable_violet_instances() {
  return &violet_instances_;
}

// required bool have_cyan = 38;
inline bool SystemSettings::has_have_cyan() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void SystemSettings::set_has_have_cyan() {
  _has_bits_[1] |= 0x00000020u;
}
inline void SystemSettings::clear_has_have_cyan() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void SystemSettings::clear_have_cyan() {
  have_cyan_ = false;
  clear_has_have_cyan();
}
inline bool SystemSettings::have_cyan() const {
  return have_cyan_;
}
inline void SystemSettings::set_have_cyan(bool value) {
  set_has_have_cyan();
  have_cyan_ = value;
}

// repeated .SystemSettings.color cyan_instances = 39;
inline int SystemSettings::cyan_instances_size() const {
  return cyan_instances_.size();
}
inline void SystemSettings::clear_cyan_instances() {
  cyan_instances_.Clear();
}
inline const ::SystemSettings_color& SystemSettings::cyan_instances(int index) const {
  return cyan_instances_.Get(index);
}
inline ::SystemSettings_color* SystemSettings::mutable_cyan_instances(int index) {
  return cyan_instances_.Mutable(index);
}
inline ::SystemSettings_color* SystemSettings::add_cyan_instances() {
  return cyan_instances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >&
SystemSettings::cyan_instances() const {
  return cyan_instances_;
}
inline ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >*
SystemSettings::mutable_cyan_instances() {
  return &cyan_instances_;
}

// required bool have_black = 41;
inline bool SystemSettings::has_have_black() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void SystemSettings::set_has_have_black() {
  _has_bits_[1] |= 0x00000080u;
}
inline void SystemSettings::clear_has_have_black() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void SystemSettings::clear_have_black() {
  have_black_ = false;
  clear_has_have_black();
}
inline bool SystemSettings::have_black() const {
  return have_black_;
}
inline void SystemSettings::set_have_black(bool value) {
  set_has_have_black();
  have_black_ = value;
}

// repeated .SystemSettings.color black_instances = 42;
inline int SystemSettings::black_instances_size() const {
  return black_instances_.size();
}
inline void SystemSettings::clear_black_instances() {
  black_instances_.Clear();
}
inline const ::SystemSettings_color& SystemSettings::black_instances(int index) const {
  return black_instances_.Get(index);
}
inline ::SystemSettings_color* SystemSettings::mutable_black_instances(int index) {
  return black_instances_.Mutable(index);
}
inline ::SystemSettings_color* SystemSettings::add_black_instances() {
  return black_instances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >&
SystemSettings::black_instances() const {
  return black_instances_;
}
inline ::google::protobuf::RepeatedPtrField< ::SystemSettings_color >*
SystemSettings::mutable_black_instances() {
  return &black_instances_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SystemSettings_2eproto__INCLUDED
