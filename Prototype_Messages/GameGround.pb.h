// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameGround.proto

#ifndef PROTOBUF_GameGround_2eproto__INCLUDED
#define PROTOBUF_GameGround_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GameGround_2eproto();
void protobuf_AssignDesc_GameGround_2eproto();
void protobuf_ShutdownFile_GameGround_2eproto();

class outputPacket;
class outputPacket_line;
class outputPacket_shape;

// ===================================================================

class outputPacket_line : public ::google::protobuf::Message {
 public:
  outputPacket_line();
  virtual ~outputPacket_line();
  
  outputPacket_line(const outputPacket_line& from);
  
  inline outputPacket_line& operator=(const outputPacket_line& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const outputPacket_line& default_instance();
  
  void Swap(outputPacket_line* other);
  
  // implements Message ----------------------------------------------
  
  outputPacket_line* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const outputPacket_line& from);
  void MergeFrom(const outputPacket_line& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float start_x = 1;
  inline bool has_start_x() const;
  inline void clear_start_x();
  static const int kStartXFieldNumber = 1;
  inline float start_x() const;
  inline void set_start_x(float value);
  
  // required float start_y = 2;
  inline bool has_start_y() const;
  inline void clear_start_y();
  static const int kStartYFieldNumber = 2;
  inline float start_y() const;
  inline void set_start_y(float value);
  
  // required float end_x = 3;
  inline bool has_end_x() const;
  inline void clear_end_x();
  static const int kEndXFieldNumber = 3;
  inline float end_x() const;
  inline void set_end_x(float value);
  
  // required float end_y = 4;
  inline bool has_end_y() const;
  inline void clear_end_y();
  static const int kEndYFieldNumber = 4;
  inline float end_y() const;
  inline void set_end_y(float value);
  
  // @@protoc_insertion_point(class_scope:outputPacket.line)
 private:
  inline void set_has_start_x();
  inline void clear_has_start_x();
  inline void set_has_start_y();
  inline void clear_has_start_y();
  inline void set_has_end_x();
  inline void clear_has_end_x();
  inline void set_has_end_y();
  inline void clear_has_end_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float start_x_;
  float start_y_;
  float end_x_;
  float end_y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameGround_2eproto();
  friend void protobuf_AssignDesc_GameGround_2eproto();
  friend void protobuf_ShutdownFile_GameGround_2eproto();
  
  void InitAsDefaultInstance();
  static outputPacket_line* default_instance_;
};
// -------------------------------------------------------------------

class outputPacket_shape : public ::google::protobuf::Message {
 public:
  outputPacket_shape();
  virtual ~outputPacket_shape();
  
  outputPacket_shape(const outputPacket_shape& from);
  
  inline outputPacket_shape& operator=(const outputPacket_shape& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const outputPacket_shape& default_instance();
  
  void Swap(outputPacket_shape* other);
  
  // implements Message ----------------------------------------------
  
  outputPacket_shape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const outputPacket_shape& from);
  void MergeFrom(const outputPacket_shape& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  
  // required string color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline const ::std::string& color() const;
  inline void set_color(const ::std::string& value);
  inline void set_color(const char* value);
  inline void set_color(const char* value, size_t size);
  inline ::std::string* mutable_color();
  inline ::std::string* release_color();
  
  // required float position_x = 3;
  inline bool has_position_x() const;
  inline void clear_position_x();
  static const int kPositionXFieldNumber = 3;
  inline float position_x() const;
  inline void set_position_x(float value);
  
  // required float position_y = 4;
  inline bool has_position_y() const;
  inline void clear_position_y();
  static const int kPositionYFieldNumber = 4;
  inline float position_y() const;
  inline void set_position_y(float value);
  
  // required double radios = 5;
  inline bool has_radios() const;
  inline void clear_radios();
  static const int kRadiosFieldNumber = 5;
  inline double radios() const;
  inline void set_radios(double value);
  
  // @@protoc_insertion_point(class_scope:outputPacket.shape)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_position_x();
  inline void clear_has_position_x();
  inline void set_has_position_y();
  inline void clear_has_position_y();
  inline void set_has_radios();
  inline void clear_has_radios();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* type_;
  ::std::string* color_;
  float position_x_;
  float position_y_;
  double radios_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameGround_2eproto();
  friend void protobuf_AssignDesc_GameGround_2eproto();
  friend void protobuf_ShutdownFile_GameGround_2eproto();
  
  void InitAsDefaultInstance();
  static outputPacket_shape* default_instance_;
};
// -------------------------------------------------------------------

class outputPacket : public ::google::protobuf::Message {
 public:
  outputPacket();
  virtual ~outputPacket();
  
  outputPacket(const outputPacket& from);
  
  inline outputPacket& operator=(const outputPacket& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const outputPacket& default_instance();
  
  void Swap(outputPacket* other);
  
  // implements Message ----------------------------------------------
  
  outputPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const outputPacket& from);
  void MergeFrom(const outputPacket& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef outputPacket_line line;
  typedef outputPacket_shape shape;
  
  // accessors -------------------------------------------------------
  
  // required int32 mission = 1;
  inline bool has_mission() const;
  inline void clear_mission();
  static const int kMissionFieldNumber = 1;
  inline ::google::protobuf::int32 mission() const;
  inline void set_mission(::google::protobuf::int32 value);
  
  // required int32 numberOfShape = 2;
  inline bool has_numberofshape() const;
  inline void clear_numberofshape();
  static const int kNumberOfShapeFieldNumber = 2;
  inline ::google::protobuf::int32 numberofshape() const;
  inline void set_numberofshape(::google::protobuf::int32 value);
  
  // required int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional float our_robot_position_x = 4;
  inline bool has_our_robot_position_x() const;
  inline void clear_our_robot_position_x();
  static const int kOurRobotPositionXFieldNumber = 4;
  inline float our_robot_position_x() const;
  inline void set_our_robot_position_x(float value);
  
  // optional float our_robot_position_y = 5;
  inline bool has_our_robot_position_y() const;
  inline void clear_our_robot_position_y();
  static const int kOurRobotPositionYFieldNumber = 5;
  inline float our_robot_position_y() const;
  inline void set_our_robot_position_y(float value);
  
  // optional double our_robot_angle = 6;
  inline bool has_our_robot_angle() const;
  inline void clear_our_robot_angle();
  static const int kOurRobotAngleFieldNumber = 6;
  inline double our_robot_angle() const;
  inline void set_our_robot_angle(double value);
  
  // optional float opp_robot_position_x = 7;
  inline bool has_opp_robot_position_x() const;
  inline void clear_opp_robot_position_x();
  static const int kOppRobotPositionXFieldNumber = 7;
  inline float opp_robot_position_x() const;
  inline void set_opp_robot_position_x(float value);
  
  // optional float opp_robot_position_y = 8;
  inline bool has_opp_robot_position_y() const;
  inline void clear_opp_robot_position_y();
  static const int kOppRobotPositionYFieldNumber = 8;
  inline float opp_robot_position_y() const;
  inline void set_opp_robot_position_y(float value);
  
  // optional double opp_robot_angle = 9;
  inline bool has_opp_robot_angle() const;
  inline void clear_opp_robot_angle();
  static const int kOppRobotAngleFieldNumber = 9;
  inline double opp_robot_angle() const;
  inline void set_opp_robot_angle(double value);
  
  // repeated .outputPacket.shape shapes = 10;
  inline int shapes_size() const;
  inline void clear_shapes();
  static const int kShapesFieldNumber = 10;
  inline const ::outputPacket_shape& shapes(int index) const;
  inline ::outputPacket_shape* mutable_shapes(int index);
  inline ::outputPacket_shape* add_shapes();
  inline const ::google::protobuf::RepeatedPtrField< ::outputPacket_shape >&
      shapes() const;
  inline ::google::protobuf::RepeatedPtrField< ::outputPacket_shape >*
      mutable_shapes();
  
  // optional bool mission1_isValid = 11;
  inline bool has_mission1_isvalid() const;
  inline void clear_mission1_isvalid();
  static const int kMission1IsValidFieldNumber = 11;
  inline bool mission1_isvalid() const;
  inline void set_mission1_isvalid(bool value);
  
  // optional float mission1_region1_tl_x = 12;
  inline bool has_mission1_region1_tl_x() const;
  inline void clear_mission1_region1_tl_x();
  static const int kMission1Region1TlXFieldNumber = 12;
  inline float mission1_region1_tl_x() const;
  inline void set_mission1_region1_tl_x(float value);
  
  // optional float mission1_region1_tl_y = 13;
  inline bool has_mission1_region1_tl_y() const;
  inline void clear_mission1_region1_tl_y();
  static const int kMission1Region1TlYFieldNumber = 13;
  inline float mission1_region1_tl_y() const;
  inline void set_mission1_region1_tl_y(float value);
  
  // optional float mission1_region1_br_x = 14;
  inline bool has_mission1_region1_br_x() const;
  inline void clear_mission1_region1_br_x();
  static const int kMission1Region1BrXFieldNumber = 14;
  inline float mission1_region1_br_x() const;
  inline void set_mission1_region1_br_x(float value);
  
  // optional float mission1_region1_br_y = 15;
  inline bool has_mission1_region1_br_y() const;
  inline void clear_mission1_region1_br_y();
  static const int kMission1Region1BrYFieldNumber = 15;
  inline float mission1_region1_br_y() const;
  inline void set_mission1_region1_br_y(float value);
  
  // optional float mission1_region2_tl_x = 16;
  inline bool has_mission1_region2_tl_x() const;
  inline void clear_mission1_region2_tl_x();
  static const int kMission1Region2TlXFieldNumber = 16;
  inline float mission1_region2_tl_x() const;
  inline void set_mission1_region2_tl_x(float value);
  
  // optional float mission1_region2_tl_y = 17;
  inline bool has_mission1_region2_tl_y() const;
  inline void clear_mission1_region2_tl_y();
  static const int kMission1Region2TlYFieldNumber = 17;
  inline float mission1_region2_tl_y() const;
  inline void set_mission1_region2_tl_y(float value);
  
  // optional float mission1_region2_br_x = 18;
  inline bool has_mission1_region2_br_x() const;
  inline void clear_mission1_region2_br_x();
  static const int kMission1Region2BrXFieldNumber = 18;
  inline float mission1_region2_br_x() const;
  inline void set_mission1_region2_br_x(float value);
  
  // optional float mission1_region2_br_y = 19;
  inline bool has_mission1_region2_br_y() const;
  inline void clear_mission1_region2_br_y();
  static const int kMission1Region2BrYFieldNumber = 19;
  inline float mission1_region2_br_y() const;
  inline void set_mission1_region2_br_y(float value);
  
  // optional float mission1_end_x = 20;
  inline bool has_mission1_end_x() const;
  inline void clear_mission1_end_x();
  static const int kMission1EndXFieldNumber = 20;
  inline float mission1_end_x() const;
  inline void set_mission1_end_x(float value);
  
  // optional float mission1_end_y = 21;
  inline bool has_mission1_end_y() const;
  inline void clear_mission1_end_y();
  static const int kMission1EndYFieldNumber = 21;
  inline float mission1_end_y() const;
  inline void set_mission1_end_y(float value);
  
  // optional bool mission2_isValid = 22;
  inline bool has_mission2_isvalid() const;
  inline void clear_mission2_isvalid();
  static const int kMission2IsValidFieldNumber = 22;
  inline bool mission2_isvalid() const;
  inline void set_mission2_isvalid(bool value);
  
  // optional float mission2_end_x = 23;
  inline bool has_mission2_end_x() const;
  inline void clear_mission2_end_x();
  static const int kMission2EndXFieldNumber = 23;
  inline float mission2_end_x() const;
  inline void set_mission2_end_x(float value);
  
  // optional float mission2_end_y = 24;
  inline bool has_mission2_end_y() const;
  inline void clear_mission2_end_y();
  static const int kMission2EndYFieldNumber = 24;
  inline float mission2_end_y() const;
  inline void set_mission2_end_y(float value);
  
  // repeated .outputPacket.line mission2_lines = 25;
  inline int mission2_lines_size() const;
  inline void clear_mission2_lines();
  static const int kMission2LinesFieldNumber = 25;
  inline const ::outputPacket_line& mission2_lines(int index) const;
  inline ::outputPacket_line* mutable_mission2_lines(int index);
  inline ::outputPacket_line* add_mission2_lines();
  inline const ::google::protobuf::RepeatedPtrField< ::outputPacket_line >&
      mission2_lines() const;
  inline ::google::protobuf::RepeatedPtrField< ::outputPacket_line >*
      mutable_mission2_lines();
  
  // optional bool mission3_isValid = 26;
  inline bool has_mission3_isvalid() const;
  inline void clear_mission3_isvalid();
  static const int kMission3IsValidFieldNumber = 26;
  inline bool mission3_isvalid() const;
  inline void set_mission3_isvalid(bool value);
  
  // optional bool mission3_isAttacker = 27;
  inline bool has_mission3_isattacker() const;
  inline void clear_mission3_isattacker();
  static const int kMission3IsAttackerFieldNumber = 27;
  inline bool mission3_isattacker() const;
  inline void set_mission3_isattacker(bool value);
  
  // optional float mission3_circularBorde_x = 28;
  inline bool has_mission3_circularborde_x() const;
  inline void clear_mission3_circularborde_x();
  static const int kMission3CircularBordeXFieldNumber = 28;
  inline float mission3_circularborde_x() const;
  inline void set_mission3_circularborde_x(float value);
  
  // optional float mission3_circularBorde_y = 29;
  inline bool has_mission3_circularborde_y() const;
  inline void clear_mission3_circularborde_y();
  static const int kMission3CircularBordeYFieldNumber = 29;
  inline float mission3_circularborde_y() const;
  inline void set_mission3_circularborde_y(float value);
  
  // optional float mission3_goal1_x = 30;
  inline bool has_mission3_goal1_x() const;
  inline void clear_mission3_goal1_x();
  static const int kMission3Goal1XFieldNumber = 30;
  inline float mission3_goal1_x() const;
  inline void set_mission3_goal1_x(float value);
  
  // optional float mission3_goal1_y = 31;
  inline bool has_mission3_goal1_y() const;
  inline void clear_mission3_goal1_y();
  static const int kMission3Goal1YFieldNumber = 31;
  inline float mission3_goal1_y() const;
  inline void set_mission3_goal1_y(float value);
  
  // optional float mission3_goal2_x = 32;
  inline bool has_mission3_goal2_x() const;
  inline void clear_mission3_goal2_x();
  static const int kMission3Goal2XFieldNumber = 32;
  inline float mission3_goal2_x() const;
  inline void set_mission3_goal2_x(float value);
  
  // optional float mission3_goal2_y = 33;
  inline bool has_mission3_goal2_y() const;
  inline void clear_mission3_goal2_y();
  static const int kMission3Goal2YFieldNumber = 33;
  inline float mission3_goal2_y() const;
  inline void set_mission3_goal2_y(float value);
  
  // @@protoc_insertion_point(class_scope:outputPacket)
 private:
  inline void set_has_mission();
  inline void clear_has_mission();
  inline void set_has_numberofshape();
  inline void clear_has_numberofshape();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_our_robot_position_x();
  inline void clear_has_our_robot_position_x();
  inline void set_has_our_robot_position_y();
  inline void clear_has_our_robot_position_y();
  inline void set_has_our_robot_angle();
  inline void clear_has_our_robot_angle();
  inline void set_has_opp_robot_position_x();
  inline void clear_has_opp_robot_position_x();
  inline void set_has_opp_robot_position_y();
  inline void clear_has_opp_robot_position_y();
  inline void set_has_opp_robot_angle();
  inline void clear_has_opp_robot_angle();
  inline void set_has_mission1_isvalid();
  inline void clear_has_mission1_isvalid();
  inline void set_has_mission1_region1_tl_x();
  inline void clear_has_mission1_region1_tl_x();
  inline void set_has_mission1_region1_tl_y();
  inline void clear_has_mission1_region1_tl_y();
  inline void set_has_mission1_region1_br_x();
  inline void clear_has_mission1_region1_br_x();
  inline void set_has_mission1_region1_br_y();
  inline void clear_has_mission1_region1_br_y();
  inline void set_has_mission1_region2_tl_x();
  inline void clear_has_mission1_region2_tl_x();
  inline void set_has_mission1_region2_tl_y();
  inline void clear_has_mission1_region2_tl_y();
  inline void set_has_mission1_region2_br_x();
  inline void clear_has_mission1_region2_br_x();
  inline void set_has_mission1_region2_br_y();
  inline void clear_has_mission1_region2_br_y();
  inline void set_has_mission1_end_x();
  inline void clear_has_mission1_end_x();
  inline void set_has_mission1_end_y();
  inline void clear_has_mission1_end_y();
  inline void set_has_mission2_isvalid();
  inline void clear_has_mission2_isvalid();
  inline void set_has_mission2_end_x();
  inline void clear_has_mission2_end_x();
  inline void set_has_mission2_end_y();
  inline void clear_has_mission2_end_y();
  inline void set_has_mission3_isvalid();
  inline void clear_has_mission3_isvalid();
  inline void set_has_mission3_isattacker();
  inline void clear_has_mission3_isattacker();
  inline void set_has_mission3_circularborde_x();
  inline void clear_has_mission3_circularborde_x();
  inline void set_has_mission3_circularborde_y();
  inline void clear_has_mission3_circularborde_y();
  inline void set_has_mission3_goal1_x();
  inline void clear_has_mission3_goal1_x();
  inline void set_has_mission3_goal1_y();
  inline void clear_has_mission3_goal1_y();
  inline void set_has_mission3_goal2_x();
  inline void clear_has_mission3_goal2_x();
  inline void set_has_mission3_goal2_y();
  inline void clear_has_mission3_goal2_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 mission_;
  ::google::protobuf::int32 numberofshape_;
  ::google::protobuf::int32 type_;
  float our_robot_position_x_;
  double our_robot_angle_;
  float our_robot_position_y_;
  float opp_robot_position_x_;
  double opp_robot_angle_;
  ::google::protobuf::RepeatedPtrField< ::outputPacket_shape > shapes_;
  float opp_robot_position_y_;
  float mission1_region1_tl_x_;
  float mission1_region1_tl_y_;
  float mission1_region1_br_x_;
  float mission1_region1_br_y_;
  float mission1_region2_tl_x_;
  float mission1_region2_tl_y_;
  float mission1_region2_br_x_;
  float mission1_region2_br_y_;
  float mission1_end_x_;
  float mission1_end_y_;
  bool mission1_isvalid_;
  bool mission2_isvalid_;
  bool mission3_isvalid_;
  bool mission3_isattacker_;
  float mission2_end_x_;
  float mission2_end_y_;
  ::google::protobuf::RepeatedPtrField< ::outputPacket_line > mission2_lines_;
  float mission3_circularborde_x_;
  float mission3_circularborde_y_;
  float mission3_goal1_x_;
  float mission3_goal1_y_;
  float mission3_goal2_x_;
  float mission3_goal2_y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(33 + 31) / 32];
  
  friend void  protobuf_AddDesc_GameGround_2eproto();
  friend void protobuf_AssignDesc_GameGround_2eproto();
  friend void protobuf_ShutdownFile_GameGround_2eproto();
  
  void InitAsDefaultInstance();
  static outputPacket* default_instance_;
};
// ===================================================================


// ===================================================================

// outputPacket_line

// required float start_x = 1;
inline bool outputPacket_line::has_start_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void outputPacket_line::set_has_start_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void outputPacket_line::clear_has_start_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void outputPacket_line::clear_start_x() {
  start_x_ = 0;
  clear_has_start_x();
}
inline float outputPacket_line::start_x() const {
  return start_x_;
}
inline void outputPacket_line::set_start_x(float value) {
  set_has_start_x();
  start_x_ = value;
}

// required float start_y = 2;
inline bool outputPacket_line::has_start_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void outputPacket_line::set_has_start_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void outputPacket_line::clear_has_start_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void outputPacket_line::clear_start_y() {
  start_y_ = 0;
  clear_has_start_y();
}
inline float outputPacket_line::start_y() const {
  return start_y_;
}
inline void outputPacket_line::set_start_y(float value) {
  set_has_start_y();
  start_y_ = value;
}

// required float end_x = 3;
inline bool outputPacket_line::has_end_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void outputPacket_line::set_has_end_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void outputPacket_line::clear_has_end_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void outputPacket_line::clear_end_x() {
  end_x_ = 0;
  clear_has_end_x();
}
inline float outputPacket_line::end_x() const {
  return end_x_;
}
inline void outputPacket_line::set_end_x(float value) {
  set_has_end_x();
  end_x_ = value;
}

// required float end_y = 4;
inline bool outputPacket_line::has_end_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void outputPacket_line::set_has_end_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void outputPacket_line::clear_has_end_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void outputPacket_line::clear_end_y() {
  end_y_ = 0;
  clear_has_end_y();
}
inline float outputPacket_line::end_y() const {
  return end_y_;
}
inline void outputPacket_line::set_end_y(float value) {
  set_has_end_y();
  end_y_ = value;
}

// -------------------------------------------------------------------

// outputPacket_shape

// required string type = 1;
inline bool outputPacket_shape::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void outputPacket_shape::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void outputPacket_shape::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void outputPacket_shape::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& outputPacket_shape::type() const {
  return *type_;
}
inline void outputPacket_shape::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void outputPacket_shape::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void outputPacket_shape::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* outputPacket_shape::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* outputPacket_shape::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string color = 2;
inline bool outputPacket_shape::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void outputPacket_shape::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void outputPacket_shape::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void outputPacket_shape::clear_color() {
  if (color_ != &::google::protobuf::internal::kEmptyString) {
    color_->clear();
  }
  clear_has_color();
}
inline const ::std::string& outputPacket_shape::color() const {
  return *color_;
}
inline void outputPacket_shape::set_color(const ::std::string& value) {
  set_has_color();
  if (color_ == &::google::protobuf::internal::kEmptyString) {
    color_ = new ::std::string;
  }
  color_->assign(value);
}
inline void outputPacket_shape::set_color(const char* value) {
  set_has_color();
  if (color_ == &::google::protobuf::internal::kEmptyString) {
    color_ = new ::std::string;
  }
  color_->assign(value);
}
inline void outputPacket_shape::set_color(const char* value, size_t size) {
  set_has_color();
  if (color_ == &::google::protobuf::internal::kEmptyString) {
    color_ = new ::std::string;
  }
  color_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* outputPacket_shape::mutable_color() {
  set_has_color();
  if (color_ == &::google::protobuf::internal::kEmptyString) {
    color_ = new ::std::string;
  }
  return color_;
}
inline ::std::string* outputPacket_shape::release_color() {
  clear_has_color();
  if (color_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = color_;
    color_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required float position_x = 3;
inline bool outputPacket_shape::has_position_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void outputPacket_shape::set_has_position_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void outputPacket_shape::clear_has_position_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void outputPacket_shape::clear_position_x() {
  position_x_ = 0;
  clear_has_position_x();
}
inline float outputPacket_shape::position_x() const {
  return position_x_;
}
inline void outputPacket_shape::set_position_x(float value) {
  set_has_position_x();
  position_x_ = value;
}

// required float position_y = 4;
inline bool outputPacket_shape::has_position_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void outputPacket_shape::set_has_position_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void outputPacket_shape::clear_has_position_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void outputPacket_shape::clear_position_y() {
  position_y_ = 0;
  clear_has_position_y();
}
inline float outputPacket_shape::position_y() const {
  return position_y_;
}
inline void outputPacket_shape::set_position_y(float value) {
  set_has_position_y();
  position_y_ = value;
}

// required double radios = 5;
inline bool outputPacket_shape::has_radios() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void outputPacket_shape::set_has_radios() {
  _has_bits_[0] |= 0x00000010u;
}
inline void outputPacket_shape::clear_has_radios() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void outputPacket_shape::clear_radios() {
  radios_ = 0;
  clear_has_radios();
}
inline double outputPacket_shape::radios() const {
  return radios_;
}
inline void outputPacket_shape::set_radios(double value) {
  set_has_radios();
  radios_ = value;
}

// -------------------------------------------------------------------

// outputPacket

// required int32 mission = 1;
inline bool outputPacket::has_mission() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void outputPacket::set_has_mission() {
  _has_bits_[0] |= 0x00000001u;
}
inline void outputPacket::clear_has_mission() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void outputPacket::clear_mission() {
  mission_ = 0;
  clear_has_mission();
}
inline ::google::protobuf::int32 outputPacket::mission() const {
  return mission_;
}
inline void outputPacket::set_mission(::google::protobuf::int32 value) {
  set_has_mission();
  mission_ = value;
}

// required int32 numberOfShape = 2;
inline bool outputPacket::has_numberofshape() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void outputPacket::set_has_numberofshape() {
  _has_bits_[0] |= 0x00000002u;
}
inline void outputPacket::clear_has_numberofshape() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void outputPacket::clear_numberofshape() {
  numberofshape_ = 0;
  clear_has_numberofshape();
}
inline ::google::protobuf::int32 outputPacket::numberofshape() const {
  return numberofshape_;
}
inline void outputPacket::set_numberofshape(::google::protobuf::int32 value) {
  set_has_numberofshape();
  numberofshape_ = value;
}

// required int32 type = 3;
inline bool outputPacket::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void outputPacket::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void outputPacket::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void outputPacket::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 outputPacket::type() const {
  return type_;
}
inline void outputPacket::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional float our_robot_position_x = 4;
inline bool outputPacket::has_our_robot_position_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void outputPacket::set_has_our_robot_position_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void outputPacket::clear_has_our_robot_position_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void outputPacket::clear_our_robot_position_x() {
  our_robot_position_x_ = 0;
  clear_has_our_robot_position_x();
}
inline float outputPacket::our_robot_position_x() const {
  return our_robot_position_x_;
}
inline void outputPacket::set_our_robot_position_x(float value) {
  set_has_our_robot_position_x();
  our_robot_position_x_ = value;
}

// optional float our_robot_position_y = 5;
inline bool outputPacket::has_our_robot_position_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void outputPacket::set_has_our_robot_position_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void outputPacket::clear_has_our_robot_position_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void outputPacket::clear_our_robot_position_y() {
  our_robot_position_y_ = 0;
  clear_has_our_robot_position_y();
}
inline float outputPacket::our_robot_position_y() const {
  return our_robot_position_y_;
}
inline void outputPacket::set_our_robot_position_y(float value) {
  set_has_our_robot_position_y();
  our_robot_position_y_ = value;
}

// optional double our_robot_angle = 6;
inline bool outputPacket::has_our_robot_angle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void outputPacket::set_has_our_robot_angle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void outputPacket::clear_has_our_robot_angle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void outputPacket::clear_our_robot_angle() {
  our_robot_angle_ = 0;
  clear_has_our_robot_angle();
}
inline double outputPacket::our_robot_angle() const {
  return our_robot_angle_;
}
inline void outputPacket::set_our_robot_angle(double value) {
  set_has_our_robot_angle();
  our_robot_angle_ = value;
}

// optional float opp_robot_position_x = 7;
inline bool outputPacket::has_opp_robot_position_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void outputPacket::set_has_opp_robot_position_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void outputPacket::clear_has_opp_robot_position_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void outputPacket::clear_opp_robot_position_x() {
  opp_robot_position_x_ = 0;
  clear_has_opp_robot_position_x();
}
inline float outputPacket::opp_robot_position_x() const {
  return opp_robot_position_x_;
}
inline void outputPacket::set_opp_robot_position_x(float value) {
  set_has_opp_robot_position_x();
  opp_robot_position_x_ = value;
}

// optional float opp_robot_position_y = 8;
inline bool outputPacket::has_opp_robot_position_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void outputPacket::set_has_opp_robot_position_y() {
  _has_bits_[0] |= 0x00000080u;
}
inline void outputPacket::clear_has_opp_robot_position_y() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void outputPacket::clear_opp_robot_position_y() {
  opp_robot_position_y_ = 0;
  clear_has_opp_robot_position_y();
}
inline float outputPacket::opp_robot_position_y() const {
  return opp_robot_position_y_;
}
inline void outputPacket::set_opp_robot_position_y(float value) {
  set_has_opp_robot_position_y();
  opp_robot_position_y_ = value;
}

// optional double opp_robot_angle = 9;
inline bool outputPacket::has_opp_robot_angle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void outputPacket::set_has_opp_robot_angle() {
  _has_bits_[0] |= 0x00000100u;
}
inline void outputPacket::clear_has_opp_robot_angle() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void outputPacket::clear_opp_robot_angle() {
  opp_robot_angle_ = 0;
  clear_has_opp_robot_angle();
}
inline double outputPacket::opp_robot_angle() const {
  return opp_robot_angle_;
}
inline void outputPacket::set_opp_robot_angle(double value) {
  set_has_opp_robot_angle();
  opp_robot_angle_ = value;
}

// repeated .outputPacket.shape shapes = 10;
inline int outputPacket::shapes_size() const {
  return shapes_.size();
}
inline void outputPacket::clear_shapes() {
  shapes_.Clear();
}
inline const ::outputPacket_shape& outputPacket::shapes(int index) const {
  return shapes_.Get(index);
}
inline ::outputPacket_shape* outputPacket::mutable_shapes(int index) {
  return shapes_.Mutable(index);
}
inline ::outputPacket_shape* outputPacket::add_shapes() {
  return shapes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::outputPacket_shape >&
outputPacket::shapes() const {
  return shapes_;
}
inline ::google::protobuf::RepeatedPtrField< ::outputPacket_shape >*
outputPacket::mutable_shapes() {
  return &shapes_;
}

// optional bool mission1_isValid = 11;
inline bool outputPacket::has_mission1_isvalid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void outputPacket::set_has_mission1_isvalid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void outputPacket::clear_has_mission1_isvalid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void outputPacket::clear_mission1_isvalid() {
  mission1_isvalid_ = false;
  clear_has_mission1_isvalid();
}
inline bool outputPacket::mission1_isvalid() const {
  return mission1_isvalid_;
}
inline void outputPacket::set_mission1_isvalid(bool value) {
  set_has_mission1_isvalid();
  mission1_isvalid_ = value;
}

// optional float mission1_region1_tl_x = 12;
inline bool outputPacket::has_mission1_region1_tl_x() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void outputPacket::set_has_mission1_region1_tl_x() {
  _has_bits_[0] |= 0x00000800u;
}
inline void outputPacket::clear_has_mission1_region1_tl_x() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void outputPacket::clear_mission1_region1_tl_x() {
  mission1_region1_tl_x_ = 0;
  clear_has_mission1_region1_tl_x();
}
inline float outputPacket::mission1_region1_tl_x() const {
  return mission1_region1_tl_x_;
}
inline void outputPacket::set_mission1_region1_tl_x(float value) {
  set_has_mission1_region1_tl_x();
  mission1_region1_tl_x_ = value;
}

// optional float mission1_region1_tl_y = 13;
inline bool outputPacket::has_mission1_region1_tl_y() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void outputPacket::set_has_mission1_region1_tl_y() {
  _has_bits_[0] |= 0x00001000u;
}
inline void outputPacket::clear_has_mission1_region1_tl_y() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void outputPacket::clear_mission1_region1_tl_y() {
  mission1_region1_tl_y_ = 0;
  clear_has_mission1_region1_tl_y();
}
inline float outputPacket::mission1_region1_tl_y() const {
  return mission1_region1_tl_y_;
}
inline void outputPacket::set_mission1_region1_tl_y(float value) {
  set_has_mission1_region1_tl_y();
  mission1_region1_tl_y_ = value;
}

// optional float mission1_region1_br_x = 14;
inline bool outputPacket::has_mission1_region1_br_x() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void outputPacket::set_has_mission1_region1_br_x() {
  _has_bits_[0] |= 0x00002000u;
}
inline void outputPacket::clear_has_mission1_region1_br_x() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void outputPacket::clear_mission1_region1_br_x() {
  mission1_region1_br_x_ = 0;
  clear_has_mission1_region1_br_x();
}
inline float outputPacket::mission1_region1_br_x() const {
  return mission1_region1_br_x_;
}
inline void outputPacket::set_mission1_region1_br_x(float value) {
  set_has_mission1_region1_br_x();
  mission1_region1_br_x_ = value;
}

// optional float mission1_region1_br_y = 15;
inline bool outputPacket::has_mission1_region1_br_y() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void outputPacket::set_has_mission1_region1_br_y() {
  _has_bits_[0] |= 0x00004000u;
}
inline void outputPacket::clear_has_mission1_region1_br_y() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void outputPacket::clear_mission1_region1_br_y() {
  mission1_region1_br_y_ = 0;
  clear_has_mission1_region1_br_y();
}
inline float outputPacket::mission1_region1_br_y() const {
  return mission1_region1_br_y_;
}
inline void outputPacket::set_mission1_region1_br_y(float value) {
  set_has_mission1_region1_br_y();
  mission1_region1_br_y_ = value;
}

// optional float mission1_region2_tl_x = 16;
inline bool outputPacket::has_mission1_region2_tl_x() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void outputPacket::set_has_mission1_region2_tl_x() {
  _has_bits_[0] |= 0x00008000u;
}
inline void outputPacket::clear_has_mission1_region2_tl_x() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void outputPacket::clear_mission1_region2_tl_x() {
  mission1_region2_tl_x_ = 0;
  clear_has_mission1_region2_tl_x();
}
inline float outputPacket::mission1_region2_tl_x() const {
  return mission1_region2_tl_x_;
}
inline void outputPacket::set_mission1_region2_tl_x(float value) {
  set_has_mission1_region2_tl_x();
  mission1_region2_tl_x_ = value;
}

// optional float mission1_region2_tl_y = 17;
inline bool outputPacket::has_mission1_region2_tl_y() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void outputPacket::set_has_mission1_region2_tl_y() {
  _has_bits_[0] |= 0x00010000u;
}
inline void outputPacket::clear_has_mission1_region2_tl_y() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void outputPacket::clear_mission1_region2_tl_y() {
  mission1_region2_tl_y_ = 0;
  clear_has_mission1_region2_tl_y();
}
inline float outputPacket::mission1_region2_tl_y() const {
  return mission1_region2_tl_y_;
}
inline void outputPacket::set_mission1_region2_tl_y(float value) {
  set_has_mission1_region2_tl_y();
  mission1_region2_tl_y_ = value;
}

// optional float mission1_region2_br_x = 18;
inline bool outputPacket::has_mission1_region2_br_x() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void outputPacket::set_has_mission1_region2_br_x() {
  _has_bits_[0] |= 0x00020000u;
}
inline void outputPacket::clear_has_mission1_region2_br_x() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void outputPacket::clear_mission1_region2_br_x() {
  mission1_region2_br_x_ = 0;
  clear_has_mission1_region2_br_x();
}
inline float outputPacket::mission1_region2_br_x() const {
  return mission1_region2_br_x_;
}
inline void outputPacket::set_mission1_region2_br_x(float value) {
  set_has_mission1_region2_br_x();
  mission1_region2_br_x_ = value;
}

// optional float mission1_region2_br_y = 19;
inline bool outputPacket::has_mission1_region2_br_y() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void outputPacket::set_has_mission1_region2_br_y() {
  _has_bits_[0] |= 0x00040000u;
}
inline void outputPacket::clear_has_mission1_region2_br_y() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void outputPacket::clear_mission1_region2_br_y() {
  mission1_region2_br_y_ = 0;
  clear_has_mission1_region2_br_y();
}
inline float outputPacket::mission1_region2_br_y() const {
  return mission1_region2_br_y_;
}
inline void outputPacket::set_mission1_region2_br_y(float value) {
  set_has_mission1_region2_br_y();
  mission1_region2_br_y_ = value;
}

// optional float mission1_end_x = 20;
inline bool outputPacket::has_mission1_end_x() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void outputPacket::set_has_mission1_end_x() {
  _has_bits_[0] |= 0x00080000u;
}
inline void outputPacket::clear_has_mission1_end_x() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void outputPacket::clear_mission1_end_x() {
  mission1_end_x_ = 0;
  clear_has_mission1_end_x();
}
inline float outputPacket::mission1_end_x() const {
  return mission1_end_x_;
}
inline void outputPacket::set_mission1_end_x(float value) {
  set_has_mission1_end_x();
  mission1_end_x_ = value;
}

// optional float mission1_end_y = 21;
inline bool outputPacket::has_mission1_end_y() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void outputPacket::set_has_mission1_end_y() {
  _has_bits_[0] |= 0x00100000u;
}
inline void outputPacket::clear_has_mission1_end_y() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void outputPacket::clear_mission1_end_y() {
  mission1_end_y_ = 0;
  clear_has_mission1_end_y();
}
inline float outputPacket::mission1_end_y() const {
  return mission1_end_y_;
}
inline void outputPacket::set_mission1_end_y(float value) {
  set_has_mission1_end_y();
  mission1_end_y_ = value;
}

// optional bool mission2_isValid = 22;
inline bool outputPacket::has_mission2_isvalid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void outputPacket::set_has_mission2_isvalid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void outputPacket::clear_has_mission2_isvalid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void outputPacket::clear_mission2_isvalid() {
  mission2_isvalid_ = false;
  clear_has_mission2_isvalid();
}
inline bool outputPacket::mission2_isvalid() const {
  return mission2_isvalid_;
}
inline void outputPacket::set_mission2_isvalid(bool value) {
  set_has_mission2_isvalid();
  mission2_isvalid_ = value;
}

// optional float mission2_end_x = 23;
inline bool outputPacket::has_mission2_end_x() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void outputPacket::set_has_mission2_end_x() {
  _has_bits_[0] |= 0x00400000u;
}
inline void outputPacket::clear_has_mission2_end_x() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void outputPacket::clear_mission2_end_x() {
  mission2_end_x_ = 0;
  clear_has_mission2_end_x();
}
inline float outputPacket::mission2_end_x() const {
  return mission2_end_x_;
}
inline void outputPacket::set_mission2_end_x(float value) {
  set_has_mission2_end_x();
  mission2_end_x_ = value;
}

// optional float mission2_end_y = 24;
inline bool outputPacket::has_mission2_end_y() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void outputPacket::set_has_mission2_end_y() {
  _has_bits_[0] |= 0x00800000u;
}
inline void outputPacket::clear_has_mission2_end_y() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void outputPacket::clear_mission2_end_y() {
  mission2_end_y_ = 0;
  clear_has_mission2_end_y();
}
inline float outputPacket::mission2_end_y() const {
  return mission2_end_y_;
}
inline void outputPacket::set_mission2_end_y(float value) {
  set_has_mission2_end_y();
  mission2_end_y_ = value;
}

// repeated .outputPacket.line mission2_lines = 25;
inline int outputPacket::mission2_lines_size() const {
  return mission2_lines_.size();
}
inline void outputPacket::clear_mission2_lines() {
  mission2_lines_.Clear();
}
inline const ::outputPacket_line& outputPacket::mission2_lines(int index) const {
  return mission2_lines_.Get(index);
}
inline ::outputPacket_line* outputPacket::mutable_mission2_lines(int index) {
  return mission2_lines_.Mutable(index);
}
inline ::outputPacket_line* outputPacket::add_mission2_lines() {
  return mission2_lines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::outputPacket_line >&
outputPacket::mission2_lines() const {
  return mission2_lines_;
}
inline ::google::protobuf::RepeatedPtrField< ::outputPacket_line >*
outputPacket::mutable_mission2_lines() {
  return &mission2_lines_;
}

// optional bool mission3_isValid = 26;
inline bool outputPacket::has_mission3_isvalid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void outputPacket::set_has_mission3_isvalid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void outputPacket::clear_has_mission3_isvalid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void outputPacket::clear_mission3_isvalid() {
  mission3_isvalid_ = false;
  clear_has_mission3_isvalid();
}
inline bool outputPacket::mission3_isvalid() const {
  return mission3_isvalid_;
}
inline void outputPacket::set_mission3_isvalid(bool value) {
  set_has_mission3_isvalid();
  mission3_isvalid_ = value;
}

// optional bool mission3_isAttacker = 27;
inline bool outputPacket::has_mission3_isattacker() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void outputPacket::set_has_mission3_isattacker() {
  _has_bits_[0] |= 0x04000000u;
}
inline void outputPacket::clear_has_mission3_isattacker() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void outputPacket::clear_mission3_isattacker() {
  mission3_isattacker_ = false;
  clear_has_mission3_isattacker();
}
inline bool outputPacket::mission3_isattacker() const {
  return mission3_isattacker_;
}
inline void outputPacket::set_mission3_isattacker(bool value) {
  set_has_mission3_isattacker();
  mission3_isattacker_ = value;
}

// optional float mission3_circularBorde_x = 28;
inline bool outputPacket::has_mission3_circularborde_x() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void outputPacket::set_has_mission3_circularborde_x() {
  _has_bits_[0] |= 0x08000000u;
}
inline void outputPacket::clear_has_mission3_circularborde_x() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void outputPacket::clear_mission3_circularborde_x() {
  mission3_circularborde_x_ = 0;
  clear_has_mission3_circularborde_x();
}
inline float outputPacket::mission3_circularborde_x() const {
  return mission3_circularborde_x_;
}
inline void outputPacket::set_mission3_circularborde_x(float value) {
  set_has_mission3_circularborde_x();
  mission3_circularborde_x_ = value;
}

// optional float mission3_circularBorde_y = 29;
inline bool outputPacket::has_mission3_circularborde_y() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void outputPacket::set_has_mission3_circularborde_y() {
  _has_bits_[0] |= 0x10000000u;
}
inline void outputPacket::clear_has_mission3_circularborde_y() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void outputPacket::clear_mission3_circularborde_y() {
  mission3_circularborde_y_ = 0;
  clear_has_mission3_circularborde_y();
}
inline float outputPacket::mission3_circularborde_y() const {
  return mission3_circularborde_y_;
}
inline void outputPacket::set_mission3_circularborde_y(float value) {
  set_has_mission3_circularborde_y();
  mission3_circularborde_y_ = value;
}

// optional float mission3_goal1_x = 30;
inline bool outputPacket::has_mission3_goal1_x() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void outputPacket::set_has_mission3_goal1_x() {
  _has_bits_[0] |= 0x20000000u;
}
inline void outputPacket::clear_has_mission3_goal1_x() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void outputPacket::clear_mission3_goal1_x() {
  mission3_goal1_x_ = 0;
  clear_has_mission3_goal1_x();
}
inline float outputPacket::mission3_goal1_x() const {
  return mission3_goal1_x_;
}
inline void outputPacket::set_mission3_goal1_x(float value) {
  set_has_mission3_goal1_x();
  mission3_goal1_x_ = value;
}

// optional float mission3_goal1_y = 31;
inline bool outputPacket::has_mission3_goal1_y() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void outputPacket::set_has_mission3_goal1_y() {
  _has_bits_[0] |= 0x40000000u;
}
inline void outputPacket::clear_has_mission3_goal1_y() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void outputPacket::clear_mission3_goal1_y() {
  mission3_goal1_y_ = 0;
  clear_has_mission3_goal1_y();
}
inline float outputPacket::mission3_goal1_y() const {
  return mission3_goal1_y_;
}
inline void outputPacket::set_mission3_goal1_y(float value) {
  set_has_mission3_goal1_y();
  mission3_goal1_y_ = value;
}

// optional float mission3_goal2_x = 32;
inline bool outputPacket::has_mission3_goal2_x() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void outputPacket::set_has_mission3_goal2_x() {
  _has_bits_[0] |= 0x80000000u;
}
inline void outputPacket::clear_has_mission3_goal2_x() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void outputPacket::clear_mission3_goal2_x() {
  mission3_goal2_x_ = 0;
  clear_has_mission3_goal2_x();
}
inline float outputPacket::mission3_goal2_x() const {
  return mission3_goal2_x_;
}
inline void outputPacket::set_mission3_goal2_x(float value) {
  set_has_mission3_goal2_x();
  mission3_goal2_x_ = value;
}

// optional float mission3_goal2_y = 33;
inline bool outputPacket::has_mission3_goal2_y() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void outputPacket::set_has_mission3_goal2_y() {
  _has_bits_[1] |= 0x00000001u;
}
inline void outputPacket::clear_has_mission3_goal2_y() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void outputPacket::clear_mission3_goal2_y() {
  mission3_goal2_y_ = 0;
  clear_has_mission3_goal2_y();
}
inline float outputPacket::mission3_goal2_y() const {
  return mission3_goal2_y_;
}
inline void outputPacket::set_mission3_goal2_y(float value) {
  set_has_mission3_goal2_y();
  mission3_goal2_y_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameGround_2eproto__INCLUDED
