// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameGround.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* outputPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  outputPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* outputPacket_line_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  outputPacket_line_reflection_ = NULL;
const ::google::protobuf::Descriptor* outputPacket_shape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  outputPacket_shape_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameGround_2eproto() {
  protobuf_AddDesc_GameGround_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameGround.proto");
  GOOGLE_CHECK(file != NULL);
  outputPacket_descriptor_ = file->message_type(0);
  static const int outputPacket_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, numberofshape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, our_robot_position_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, our_robot_position_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, our_robot_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, opp_robot_position_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, opp_robot_position_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, opp_robot_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, shapes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission1_isvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission1_region1_tl_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission1_region1_tl_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission1_region1_br_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission1_region1_br_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission1_region2_tl_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission1_region2_tl_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission1_region2_br_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission1_region2_br_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission1_end_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission1_end_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission2_isvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission2_end_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission2_end_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission2_lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission3_isvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission3_isattacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission3_circularborde_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission3_circularborde_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission3_goal1_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission3_goal1_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission3_goal2_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, mission3_goal2_y_),
  };
  outputPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      outputPacket_descriptor_,
      outputPacket::default_instance_,
      outputPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(outputPacket));
  outputPacket_line_descriptor_ = outputPacket_descriptor_->nested_type(0);
  static const int outputPacket_line_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket_line, start_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket_line, start_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket_line, end_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket_line, end_y_),
  };
  outputPacket_line_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      outputPacket_line_descriptor_,
      outputPacket_line::default_instance_,
      outputPacket_line_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket_line, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket_line, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(outputPacket_line));
  outputPacket_shape_descriptor_ = outputPacket_descriptor_->nested_type(1);
  static const int outputPacket_shape_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket_shape, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket_shape, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket_shape, position_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket_shape, position_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket_shape, radios_),
  };
  outputPacket_shape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      outputPacket_shape_descriptor_,
      outputPacket_shape::default_instance_,
      outputPacket_shape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket_shape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(outputPacket_shape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(outputPacket_shape));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameGround_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    outputPacket_descriptor_, &outputPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    outputPacket_line_descriptor_, &outputPacket_line::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    outputPacket_shape_descriptor_, &outputPacket_shape::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameGround_2eproto() {
  delete outputPacket::default_instance_;
  delete outputPacket_reflection_;
  delete outputPacket_line::default_instance_;
  delete outputPacket_line_reflection_;
  delete outputPacket_shape::default_instance_;
  delete outputPacket_shape_reflection_;
}

void protobuf_AddDesc_GameGround_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020GameGround.proto\"\324\010\n\014outputPacket\022\017\n\007m"
    "ission\030\001 \002(\005\022\025\n\rnumberOfShape\030\002 \002(\005\022\014\n\004t"
    "ype\030\003 \002(\005\022\034\n\024our_robot_position_x\030\004 \001(\002\022"
    "\034\n\024our_robot_position_y\030\005 \001(\002\022\027\n\017our_rob"
    "ot_angle\030\006 \001(\001\022\034\n\024opp_robot_position_x\030\007"
    " \001(\002\022\034\n\024opp_robot_position_y\030\010 \001(\002\022\027\n\017op"
    "p_robot_angle\030\t \001(\001\022#\n\006shapes\030\n \003(\0132\023.ou"
    "tputPacket.shape\022\030\n\020mission1_isValid\030\013 \001"
    "(\010\022\035\n\025mission1_region1_tl_x\030\014 \001(\002\022\035\n\025mis"
    "sion1_region1_tl_y\030\r \001(\002\022\035\n\025mission1_reg"
    "ion1_br_x\030\016 \001(\002\022\035\n\025mission1_region1_br_y"
    "\030\017 \001(\002\022\035\n\025mission1_region2_tl_x\030\020 \001(\002\022\035\n"
    "\025mission1_region2_tl_y\030\021 \001(\002\022\035\n\025mission1"
    "_region2_br_x\030\022 \001(\002\022\035\n\025mission1_region2_"
    "br_y\030\023 \001(\002\022\026\n\016mission1_end_x\030\024 \001(\002\022\026\n\016mi"
    "ssion1_end_y\030\025 \001(\002\022\030\n\020mission2_isValid\030\026"
    " \001(\010\022\026\n\016mission2_end_x\030\027 \001(\002\022\026\n\016mission2"
    "_end_y\030\030 \001(\002\022*\n\016mission2_lines\030\031 \003(\0132\022.o"
    "utputPacket.line\022\030\n\020mission3_isValid\030\032 \001"
    "(\010\022\033\n\023mission3_isAttacker\030\033 \001(\010\022 \n\030missi"
    "on3_circularBorde_x\030\034 \001(\002\022 \n\030mission3_ci"
    "rcularBorde_y\030\035 \001(\002\022\030\n\020mission3_goal1_x\030"
    "\036 \001(\002\022\030\n\020mission3_goal1_y\030\037 \001(\002\022\030\n\020missi"
    "on3_goal2_x\030  \001(\002\022\030\n\020mission3_goal2_y\030! "
    "\001(\002\032F\n\004line\022\017\n\007start_x\030\001 \002(\002\022\017\n\007start_y\030"
    "\002 \002(\002\022\r\n\005end_x\030\003 \002(\002\022\r\n\005end_y\030\004 \002(\002\032\\\n\005s"
    "hape\022\014\n\004type\030\001 \002(\t\022\r\n\005color\030\002 \002(\t\022\022\n\npos"
    "ition_x\030\003 \002(\002\022\022\n\nposition_y\030\004 \002(\002\022\016\n\006rad"
    "ios\030\005 \002(\001", 1129);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameGround.proto", &protobuf_RegisterTypes);
  outputPacket::default_instance_ = new outputPacket();
  outputPacket_line::default_instance_ = new outputPacket_line();
  outputPacket_shape::default_instance_ = new outputPacket_shape();
  outputPacket::default_instance_->InitAsDefaultInstance();
  outputPacket_line::default_instance_->InitAsDefaultInstance();
  outputPacket_shape::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameGround_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameGround_2eproto {
  StaticDescriptorInitializer_GameGround_2eproto() {
    protobuf_AddDesc_GameGround_2eproto();
  }
} static_descriptor_initializer_GameGround_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int outputPacket_line::kStartXFieldNumber;
const int outputPacket_line::kStartYFieldNumber;
const int outputPacket_line::kEndXFieldNumber;
const int outputPacket_line::kEndYFieldNumber;
#endif  // !_MSC_VER

outputPacket_line::outputPacket_line()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void outputPacket_line::InitAsDefaultInstance() {
}

outputPacket_line::outputPacket_line(const outputPacket_line& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void outputPacket_line::SharedCtor() {
  _cached_size_ = 0;
  start_x_ = 0;
  start_y_ = 0;
  end_x_ = 0;
  end_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

outputPacket_line::~outputPacket_line() {
  SharedDtor();
}

void outputPacket_line::SharedDtor() {
  if (this != default_instance_) {
  }
}

void outputPacket_line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* outputPacket_line::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return outputPacket_line_descriptor_;
}

const outputPacket_line& outputPacket_line::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameGround_2eproto();  return *default_instance_;
}

outputPacket_line* outputPacket_line::default_instance_ = NULL;

outputPacket_line* outputPacket_line::New() const {
  return new outputPacket_line;
}

void outputPacket_line::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_x_ = 0;
    start_y_ = 0;
    end_x_ = 0;
    end_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool outputPacket_line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float start_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_x_)));
          set_has_start_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_start_y;
        break;
      }
      
      // required float start_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_y_)));
          set_has_start_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_end_x;
        break;
      }
      
      // required float end_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_end_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_x_)));
          set_has_end_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_end_y;
        break;
      }
      
      // required float end_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_end_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_y_)));
          set_has_end_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void outputPacket_line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float start_x = 1;
  if (has_start_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->start_x(), output);
  }
  
  // required float start_y = 2;
  if (has_start_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->start_y(), output);
  }
  
  // required float end_x = 3;
  if (has_end_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->end_x(), output);
  }
  
  // required float end_y = 4;
  if (has_end_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->end_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* outputPacket_line::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float start_x = 1;
  if (has_start_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->start_x(), target);
  }
  
  // required float start_y = 2;
  if (has_start_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->start_y(), target);
  }
  
  // required float end_x = 3;
  if (has_end_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->end_x(), target);
  }
  
  // required float end_y = 4;
  if (has_end_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->end_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int outputPacket_line::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float start_x = 1;
    if (has_start_x()) {
      total_size += 1 + 4;
    }
    
    // required float start_y = 2;
    if (has_start_y()) {
      total_size += 1 + 4;
    }
    
    // required float end_x = 3;
    if (has_end_x()) {
      total_size += 1 + 4;
    }
    
    // required float end_y = 4;
    if (has_end_y()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void outputPacket_line::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const outputPacket_line* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const outputPacket_line*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void outputPacket_line::MergeFrom(const outputPacket_line& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_x()) {
      set_start_x(from.start_x());
    }
    if (from.has_start_y()) {
      set_start_y(from.start_y());
    }
    if (from.has_end_x()) {
      set_end_x(from.end_x());
    }
    if (from.has_end_y()) {
      set_end_y(from.end_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void outputPacket_line::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void outputPacket_line::CopyFrom(const outputPacket_line& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool outputPacket_line::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void outputPacket_line::Swap(outputPacket_line* other) {
  if (other != this) {
    std::swap(start_x_, other->start_x_);
    std::swap(start_y_, other->start_y_);
    std::swap(end_x_, other->end_x_);
    std::swap(end_y_, other->end_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata outputPacket_line::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = outputPacket_line_descriptor_;
  metadata.reflection = outputPacket_line_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int outputPacket_shape::kTypeFieldNumber;
const int outputPacket_shape::kColorFieldNumber;
const int outputPacket_shape::kPositionXFieldNumber;
const int outputPacket_shape::kPositionYFieldNumber;
const int outputPacket_shape::kRadiosFieldNumber;
#endif  // !_MSC_VER

outputPacket_shape::outputPacket_shape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void outputPacket_shape::InitAsDefaultInstance() {
}

outputPacket_shape::outputPacket_shape(const outputPacket_shape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void outputPacket_shape::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  color_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_x_ = 0;
  position_y_ = 0;
  radios_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

outputPacket_shape::~outputPacket_shape() {
  SharedDtor();
}

void outputPacket_shape::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (color_ != &::google::protobuf::internal::kEmptyString) {
    delete color_;
  }
  if (this != default_instance_) {
  }
}

void outputPacket_shape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* outputPacket_shape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return outputPacket_shape_descriptor_;
}

const outputPacket_shape& outputPacket_shape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameGround_2eproto();  return *default_instance_;
}

outputPacket_shape* outputPacket_shape::default_instance_ = NULL;

outputPacket_shape* outputPacket_shape::New() const {
  return new outputPacket_shape;
}

void outputPacket_shape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_color()) {
      if (color_ != &::google::protobuf::internal::kEmptyString) {
        color_->clear();
      }
    }
    position_x_ = 0;
    position_y_ = 0;
    radios_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool outputPacket_shape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_color;
        break;
      }
      
      // required string color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->color().data(), this->color().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_position_x;
        break;
      }
      
      // required float position_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_x_)));
          set_has_position_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_position_y;
        break;
      }
      
      // required float position_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_y_)));
          set_has_position_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_radios;
        break;
      }
      
      // required double radios = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radios:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radios_)));
          set_has_radios();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void outputPacket_shape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }
  
  // required string color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->color(), output);
  }
  
  // required float position_x = 3;
  if (has_position_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->position_x(), output);
  }
  
  // required float position_y = 4;
  if (has_position_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->position_y(), output);
  }
  
  // required double radios = 5;
  if (has_radios()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->radios(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* outputPacket_shape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }
  
  // required string color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->color(), target);
  }
  
  // required float position_x = 3;
  if (has_position_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->position_x(), target);
  }
  
  // required float position_y = 4;
  if (has_position_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->position_y(), target);
  }
  
  // required double radios = 5;
  if (has_radios()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->radios(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int outputPacket_shape::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // required string color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }
    
    // required float position_x = 3;
    if (has_position_x()) {
      total_size += 1 + 4;
    }
    
    // required float position_y = 4;
    if (has_position_y()) {
      total_size += 1 + 4;
    }
    
    // required double radios = 5;
    if (has_radios()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void outputPacket_shape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const outputPacket_shape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const outputPacket_shape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void outputPacket_shape::MergeFrom(const outputPacket_shape& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_position_x()) {
      set_position_x(from.position_x());
    }
    if (from.has_position_y()) {
      set_position_y(from.position_y());
    }
    if (from.has_radios()) {
      set_radios(from.radios());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void outputPacket_shape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void outputPacket_shape::CopyFrom(const outputPacket_shape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool outputPacket_shape::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void outputPacket_shape::Swap(outputPacket_shape* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(color_, other->color_);
    std::swap(position_x_, other->position_x_);
    std::swap(position_y_, other->position_y_);
    std::swap(radios_, other->radios_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata outputPacket_shape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = outputPacket_shape_descriptor_;
  metadata.reflection = outputPacket_shape_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int outputPacket::kMissionFieldNumber;
const int outputPacket::kNumberOfShapeFieldNumber;
const int outputPacket::kTypeFieldNumber;
const int outputPacket::kOurRobotPositionXFieldNumber;
const int outputPacket::kOurRobotPositionYFieldNumber;
const int outputPacket::kOurRobotAngleFieldNumber;
const int outputPacket::kOppRobotPositionXFieldNumber;
const int outputPacket::kOppRobotPositionYFieldNumber;
const int outputPacket::kOppRobotAngleFieldNumber;
const int outputPacket::kShapesFieldNumber;
const int outputPacket::kMission1IsValidFieldNumber;
const int outputPacket::kMission1Region1TlXFieldNumber;
const int outputPacket::kMission1Region1TlYFieldNumber;
const int outputPacket::kMission1Region1BrXFieldNumber;
const int outputPacket::kMission1Region1BrYFieldNumber;
const int outputPacket::kMission1Region2TlXFieldNumber;
const int outputPacket::kMission1Region2TlYFieldNumber;
const int outputPacket::kMission1Region2BrXFieldNumber;
const int outputPacket::kMission1Region2BrYFieldNumber;
const int outputPacket::kMission1EndXFieldNumber;
const int outputPacket::kMission1EndYFieldNumber;
const int outputPacket::kMission2IsValidFieldNumber;
const int outputPacket::kMission2EndXFieldNumber;
const int outputPacket::kMission2EndYFieldNumber;
const int outputPacket::kMission2LinesFieldNumber;
const int outputPacket::kMission3IsValidFieldNumber;
const int outputPacket::kMission3IsAttackerFieldNumber;
const int outputPacket::kMission3CircularBordeXFieldNumber;
const int outputPacket::kMission3CircularBordeYFieldNumber;
const int outputPacket::kMission3Goal1XFieldNumber;
const int outputPacket::kMission3Goal1YFieldNumber;
const int outputPacket::kMission3Goal2XFieldNumber;
const int outputPacket::kMission3Goal2YFieldNumber;
#endif  // !_MSC_VER

outputPacket::outputPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void outputPacket::InitAsDefaultInstance() {
}

outputPacket::outputPacket(const outputPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void outputPacket::SharedCtor() {
  _cached_size_ = 0;
  mission_ = 0;
  numberofshape_ = 0;
  type_ = 0;
  our_robot_position_x_ = 0;
  our_robot_position_y_ = 0;
  our_robot_angle_ = 0;
  opp_robot_position_x_ = 0;
  opp_robot_position_y_ = 0;
  opp_robot_angle_ = 0;
  mission1_isvalid_ = false;
  mission1_region1_tl_x_ = 0;
  mission1_region1_tl_y_ = 0;
  mission1_region1_br_x_ = 0;
  mission1_region1_br_y_ = 0;
  mission1_region2_tl_x_ = 0;
  mission1_region2_tl_y_ = 0;
  mission1_region2_br_x_ = 0;
  mission1_region2_br_y_ = 0;
  mission1_end_x_ = 0;
  mission1_end_y_ = 0;
  mission2_isvalid_ = false;
  mission2_end_x_ = 0;
  mission2_end_y_ = 0;
  mission3_isvalid_ = false;
  mission3_isattacker_ = false;
  mission3_circularborde_x_ = 0;
  mission3_circularborde_y_ = 0;
  mission3_goal1_x_ = 0;
  mission3_goal1_y_ = 0;
  mission3_goal2_x_ = 0;
  mission3_goal2_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

outputPacket::~outputPacket() {
  SharedDtor();
}

void outputPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void outputPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* outputPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return outputPacket_descriptor_;
}

const outputPacket& outputPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameGround_2eproto();  return *default_instance_;
}

outputPacket* outputPacket::default_instance_ = NULL;

outputPacket* outputPacket::New() const {
  return new outputPacket;
}

void outputPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mission_ = 0;
    numberofshape_ = 0;
    type_ = 0;
    our_robot_position_x_ = 0;
    our_robot_position_y_ = 0;
    our_robot_angle_ = 0;
    opp_robot_position_x_ = 0;
    opp_robot_position_y_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    opp_robot_angle_ = 0;
    mission1_isvalid_ = false;
    mission1_region1_tl_x_ = 0;
    mission1_region1_tl_y_ = 0;
    mission1_region1_br_x_ = 0;
    mission1_region1_br_y_ = 0;
    mission1_region2_tl_x_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    mission1_region2_tl_y_ = 0;
    mission1_region2_br_x_ = 0;
    mission1_region2_br_y_ = 0;
    mission1_end_x_ = 0;
    mission1_end_y_ = 0;
    mission2_isvalid_ = false;
    mission2_end_x_ = 0;
    mission2_end_y_ = 0;
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    mission3_isvalid_ = false;
    mission3_isattacker_ = false;
    mission3_circularborde_x_ = 0;
    mission3_circularborde_y_ = 0;
    mission3_goal1_x_ = 0;
    mission3_goal1_y_ = 0;
    mission3_goal2_x_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    mission3_goal2_y_ = 0;
  }
  shapes_.Clear();
  mission2_lines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool outputPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mission = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_)));
          set_has_mission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_numberOfShape;
        break;
      }
      
      // required int32 numberOfShape = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numberOfShape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberofshape_)));
          set_has_numberofshape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_our_robot_position_x;
        break;
      }
      
      // optional float our_robot_position_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_our_robot_position_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &our_robot_position_x_)));
          set_has_our_robot_position_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_our_robot_position_y;
        break;
      }
      
      // optional float our_robot_position_y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_our_robot_position_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &our_robot_position_y_)));
          set_has_our_robot_position_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_our_robot_angle;
        break;
      }
      
      // optional double our_robot_angle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_our_robot_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &our_robot_angle_)));
          set_has_our_robot_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_opp_robot_position_x;
        break;
      }
      
      // optional float opp_robot_position_x = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_opp_robot_position_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &opp_robot_position_x_)));
          set_has_opp_robot_position_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_opp_robot_position_y;
        break;
      }
      
      // optional float opp_robot_position_y = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_opp_robot_position_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &opp_robot_position_y_)));
          set_has_opp_robot_position_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_opp_robot_angle;
        break;
      }
      
      // optional double opp_robot_angle = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_opp_robot_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opp_robot_angle_)));
          set_has_opp_robot_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_shapes;
        break;
      }
      
      // repeated .outputPacket.shape shapes = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shapes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shapes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_shapes;
        if (input->ExpectTag(88)) goto parse_mission1_isValid;
        break;
      }
      
      // optional bool mission1_isValid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mission1_isValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mission1_isvalid_)));
          set_has_mission1_isvalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_mission1_region1_tl_x;
        break;
      }
      
      // optional float mission1_region1_tl_x = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mission1_region1_tl_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mission1_region1_tl_x_)));
          set_has_mission1_region1_tl_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_mission1_region1_tl_y;
        break;
      }
      
      // optional float mission1_region1_tl_y = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mission1_region1_tl_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mission1_region1_tl_y_)));
          set_has_mission1_region1_tl_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_mission1_region1_br_x;
        break;
      }
      
      // optional float mission1_region1_br_x = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mission1_region1_br_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mission1_region1_br_x_)));
          set_has_mission1_region1_br_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_mission1_region1_br_y;
        break;
      }
      
      // optional float mission1_region1_br_y = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mission1_region1_br_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mission1_region1_br_y_)));
          set_has_mission1_region1_br_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_mission1_region2_tl_x;
        break;
      }
      
      // optional float mission1_region2_tl_x = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mission1_region2_tl_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mission1_region2_tl_x_)));
          set_has_mission1_region2_tl_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_mission1_region2_tl_y;
        break;
      }
      
      // optional float mission1_region2_tl_y = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mission1_region2_tl_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mission1_region2_tl_y_)));
          set_has_mission1_region2_tl_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_mission1_region2_br_x;
        break;
      }
      
      // optional float mission1_region2_br_x = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mission1_region2_br_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mission1_region2_br_x_)));
          set_has_mission1_region2_br_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_mission1_region2_br_y;
        break;
      }
      
      // optional float mission1_region2_br_y = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mission1_region2_br_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mission1_region2_br_y_)));
          set_has_mission1_region2_br_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_mission1_end_x;
        break;
      }
      
      // optional float mission1_end_x = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mission1_end_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mission1_end_x_)));
          set_has_mission1_end_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_mission1_end_y;
        break;
      }
      
      // optional float mission1_end_y = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mission1_end_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mission1_end_y_)));
          set_has_mission1_end_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_mission2_isValid;
        break;
      }
      
      // optional bool mission2_isValid = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mission2_isValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mission2_isvalid_)));
          set_has_mission2_isvalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_mission2_end_x;
        break;
      }
      
      // optional float mission2_end_x = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mission2_end_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mission2_end_x_)));
          set_has_mission2_end_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_mission2_end_y;
        break;
      }
      
      // optional float mission2_end_y = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mission2_end_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mission2_end_y_)));
          set_has_mission2_end_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_mission2_lines;
        break;
      }
      
      // repeated .outputPacket.line mission2_lines = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission2_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission2_lines()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_mission2_lines;
        if (input->ExpectTag(208)) goto parse_mission3_isValid;
        break;
      }
      
      // optional bool mission3_isValid = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mission3_isValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mission3_isvalid_)));
          set_has_mission3_isvalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_mission3_isAttacker;
        break;
      }
      
      // optional bool mission3_isAttacker = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mission3_isAttacker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mission3_isattacker_)));
          set_has_mission3_isattacker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(229)) goto parse_mission3_circularBorde_x;
        break;
      }
      
      // optional float mission3_circularBorde_x = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mission3_circularBorde_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mission3_circularborde_x_)));
          set_has_mission3_circularborde_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(237)) goto parse_mission3_circularBorde_y;
        break;
      }
      
      // optional float mission3_circularBorde_y = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mission3_circularBorde_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mission3_circularborde_y_)));
          set_has_mission3_circularborde_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_mission3_goal1_x;
        break;
      }
      
      // optional float mission3_goal1_x = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mission3_goal1_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mission3_goal1_x_)));
          set_has_mission3_goal1_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(253)) goto parse_mission3_goal1_y;
        break;
      }
      
      // optional float mission3_goal1_y = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mission3_goal1_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mission3_goal1_y_)));
          set_has_mission3_goal1_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(261)) goto parse_mission3_goal2_x;
        break;
      }
      
      // optional float mission3_goal2_x = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mission3_goal2_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mission3_goal2_x_)));
          set_has_mission3_goal2_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(269)) goto parse_mission3_goal2_y;
        break;
      }
      
      // optional float mission3_goal2_y = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mission3_goal2_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mission3_goal2_y_)));
          set_has_mission3_goal2_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void outputPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mission = 1;
  if (has_mission()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mission(), output);
  }
  
  // required int32 numberOfShape = 2;
  if (has_numberofshape()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numberofshape(), output);
  }
  
  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }
  
  // optional float our_robot_position_x = 4;
  if (has_our_robot_position_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->our_robot_position_x(), output);
  }
  
  // optional float our_robot_position_y = 5;
  if (has_our_robot_position_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->our_robot_position_y(), output);
  }
  
  // optional double our_robot_angle = 6;
  if (has_our_robot_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->our_robot_angle(), output);
  }
  
  // optional float opp_robot_position_x = 7;
  if (has_opp_robot_position_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->opp_robot_position_x(), output);
  }
  
  // optional float opp_robot_position_y = 8;
  if (has_opp_robot_position_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->opp_robot_position_y(), output);
  }
  
  // optional double opp_robot_angle = 9;
  if (has_opp_robot_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->opp_robot_angle(), output);
  }
  
  // repeated .outputPacket.shape shapes = 10;
  for (int i = 0; i < this->shapes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->shapes(i), output);
  }
  
  // optional bool mission1_isValid = 11;
  if (has_mission1_isvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->mission1_isvalid(), output);
  }
  
  // optional float mission1_region1_tl_x = 12;
  if (has_mission1_region1_tl_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->mission1_region1_tl_x(), output);
  }
  
  // optional float mission1_region1_tl_y = 13;
  if (has_mission1_region1_tl_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->mission1_region1_tl_y(), output);
  }
  
  // optional float mission1_region1_br_x = 14;
  if (has_mission1_region1_br_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->mission1_region1_br_x(), output);
  }
  
  // optional float mission1_region1_br_y = 15;
  if (has_mission1_region1_br_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->mission1_region1_br_y(), output);
  }
  
  // optional float mission1_region2_tl_x = 16;
  if (has_mission1_region2_tl_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->mission1_region2_tl_x(), output);
  }
  
  // optional float mission1_region2_tl_y = 17;
  if (has_mission1_region2_tl_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->mission1_region2_tl_y(), output);
  }
  
  // optional float mission1_region2_br_x = 18;
  if (has_mission1_region2_br_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->mission1_region2_br_x(), output);
  }
  
  // optional float mission1_region2_br_y = 19;
  if (has_mission1_region2_br_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->mission1_region2_br_y(), output);
  }
  
  // optional float mission1_end_x = 20;
  if (has_mission1_end_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->mission1_end_x(), output);
  }
  
  // optional float mission1_end_y = 21;
  if (has_mission1_end_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->mission1_end_y(), output);
  }
  
  // optional bool mission2_isValid = 22;
  if (has_mission2_isvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->mission2_isvalid(), output);
  }
  
  // optional float mission2_end_x = 23;
  if (has_mission2_end_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->mission2_end_x(), output);
  }
  
  // optional float mission2_end_y = 24;
  if (has_mission2_end_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->mission2_end_y(), output);
  }
  
  // repeated .outputPacket.line mission2_lines = 25;
  for (int i = 0; i < this->mission2_lines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->mission2_lines(i), output);
  }
  
  // optional bool mission3_isValid = 26;
  if (has_mission3_isvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->mission3_isvalid(), output);
  }
  
  // optional bool mission3_isAttacker = 27;
  if (has_mission3_isattacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->mission3_isattacker(), output);
  }
  
  // optional float mission3_circularBorde_x = 28;
  if (has_mission3_circularborde_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->mission3_circularborde_x(), output);
  }
  
  // optional float mission3_circularBorde_y = 29;
  if (has_mission3_circularborde_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->mission3_circularborde_y(), output);
  }
  
  // optional float mission3_goal1_x = 30;
  if (has_mission3_goal1_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->mission3_goal1_x(), output);
  }
  
  // optional float mission3_goal1_y = 31;
  if (has_mission3_goal1_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->mission3_goal1_y(), output);
  }
  
  // optional float mission3_goal2_x = 32;
  if (has_mission3_goal2_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->mission3_goal2_x(), output);
  }
  
  // optional float mission3_goal2_y = 33;
  if (has_mission3_goal2_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->mission3_goal2_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* outputPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mission = 1;
  if (has_mission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mission(), target);
  }
  
  // required int32 numberOfShape = 2;
  if (has_numberofshape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numberofshape(), target);
  }
  
  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }
  
  // optional float our_robot_position_x = 4;
  if (has_our_robot_position_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->our_robot_position_x(), target);
  }
  
  // optional float our_robot_position_y = 5;
  if (has_our_robot_position_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->our_robot_position_y(), target);
  }
  
  // optional double our_robot_angle = 6;
  if (has_our_robot_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->our_robot_angle(), target);
  }
  
  // optional float opp_robot_position_x = 7;
  if (has_opp_robot_position_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->opp_robot_position_x(), target);
  }
  
  // optional float opp_robot_position_y = 8;
  if (has_opp_robot_position_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->opp_robot_position_y(), target);
  }
  
  // optional double opp_robot_angle = 9;
  if (has_opp_robot_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->opp_robot_angle(), target);
  }
  
  // repeated .outputPacket.shape shapes = 10;
  for (int i = 0; i < this->shapes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->shapes(i), target);
  }
  
  // optional bool mission1_isValid = 11;
  if (has_mission1_isvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->mission1_isvalid(), target);
  }
  
  // optional float mission1_region1_tl_x = 12;
  if (has_mission1_region1_tl_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->mission1_region1_tl_x(), target);
  }
  
  // optional float mission1_region1_tl_y = 13;
  if (has_mission1_region1_tl_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->mission1_region1_tl_y(), target);
  }
  
  // optional float mission1_region1_br_x = 14;
  if (has_mission1_region1_br_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->mission1_region1_br_x(), target);
  }
  
  // optional float mission1_region1_br_y = 15;
  if (has_mission1_region1_br_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->mission1_region1_br_y(), target);
  }
  
  // optional float mission1_region2_tl_x = 16;
  if (has_mission1_region2_tl_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->mission1_region2_tl_x(), target);
  }
  
  // optional float mission1_region2_tl_y = 17;
  if (has_mission1_region2_tl_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->mission1_region2_tl_y(), target);
  }
  
  // optional float mission1_region2_br_x = 18;
  if (has_mission1_region2_br_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->mission1_region2_br_x(), target);
  }
  
  // optional float mission1_region2_br_y = 19;
  if (has_mission1_region2_br_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->mission1_region2_br_y(), target);
  }
  
  // optional float mission1_end_x = 20;
  if (has_mission1_end_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->mission1_end_x(), target);
  }
  
  // optional float mission1_end_y = 21;
  if (has_mission1_end_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->mission1_end_y(), target);
  }
  
  // optional bool mission2_isValid = 22;
  if (has_mission2_isvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->mission2_isvalid(), target);
  }
  
  // optional float mission2_end_x = 23;
  if (has_mission2_end_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->mission2_end_x(), target);
  }
  
  // optional float mission2_end_y = 24;
  if (has_mission2_end_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->mission2_end_y(), target);
  }
  
  // repeated .outputPacket.line mission2_lines = 25;
  for (int i = 0; i < this->mission2_lines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->mission2_lines(i), target);
  }
  
  // optional bool mission3_isValid = 26;
  if (has_mission3_isvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->mission3_isvalid(), target);
  }
  
  // optional bool mission3_isAttacker = 27;
  if (has_mission3_isattacker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->mission3_isattacker(), target);
  }
  
  // optional float mission3_circularBorde_x = 28;
  if (has_mission3_circularborde_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->mission3_circularborde_x(), target);
  }
  
  // optional float mission3_circularBorde_y = 29;
  if (has_mission3_circularborde_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->mission3_circularborde_y(), target);
  }
  
  // optional float mission3_goal1_x = 30;
  if (has_mission3_goal1_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->mission3_goal1_x(), target);
  }
  
  // optional float mission3_goal1_y = 31;
  if (has_mission3_goal1_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->mission3_goal1_y(), target);
  }
  
  // optional float mission3_goal2_x = 32;
  if (has_mission3_goal2_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->mission3_goal2_x(), target);
  }
  
  // optional float mission3_goal2_y = 33;
  if (has_mission3_goal2_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->mission3_goal2_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int outputPacket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mission = 1;
    if (has_mission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mission());
    }
    
    // required int32 numberOfShape = 2;
    if (has_numberofshape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numberofshape());
    }
    
    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional float our_robot_position_x = 4;
    if (has_our_robot_position_x()) {
      total_size += 1 + 4;
    }
    
    // optional float our_robot_position_y = 5;
    if (has_our_robot_position_y()) {
      total_size += 1 + 4;
    }
    
    // optional double our_robot_angle = 6;
    if (has_our_robot_angle()) {
      total_size += 1 + 8;
    }
    
    // optional float opp_robot_position_x = 7;
    if (has_opp_robot_position_x()) {
      total_size += 1 + 4;
    }
    
    // optional float opp_robot_position_y = 8;
    if (has_opp_robot_position_y()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double opp_robot_angle = 9;
    if (has_opp_robot_angle()) {
      total_size += 1 + 8;
    }
    
    // optional bool mission1_isValid = 11;
    if (has_mission1_isvalid()) {
      total_size += 1 + 1;
    }
    
    // optional float mission1_region1_tl_x = 12;
    if (has_mission1_region1_tl_x()) {
      total_size += 1 + 4;
    }
    
    // optional float mission1_region1_tl_y = 13;
    if (has_mission1_region1_tl_y()) {
      total_size += 1 + 4;
    }
    
    // optional float mission1_region1_br_x = 14;
    if (has_mission1_region1_br_x()) {
      total_size += 1 + 4;
    }
    
    // optional float mission1_region1_br_y = 15;
    if (has_mission1_region1_br_y()) {
      total_size += 1 + 4;
    }
    
    // optional float mission1_region2_tl_x = 16;
    if (has_mission1_region2_tl_x()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float mission1_region2_tl_y = 17;
    if (has_mission1_region2_tl_y()) {
      total_size += 2 + 4;
    }
    
    // optional float mission1_region2_br_x = 18;
    if (has_mission1_region2_br_x()) {
      total_size += 2 + 4;
    }
    
    // optional float mission1_region2_br_y = 19;
    if (has_mission1_region2_br_y()) {
      total_size += 2 + 4;
    }
    
    // optional float mission1_end_x = 20;
    if (has_mission1_end_x()) {
      total_size += 2 + 4;
    }
    
    // optional float mission1_end_y = 21;
    if (has_mission1_end_y()) {
      total_size += 2 + 4;
    }
    
    // optional bool mission2_isValid = 22;
    if (has_mission2_isvalid()) {
      total_size += 2 + 1;
    }
    
    // optional float mission2_end_x = 23;
    if (has_mission2_end_x()) {
      total_size += 2 + 4;
    }
    
    // optional float mission2_end_y = 24;
    if (has_mission2_end_y()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional bool mission3_isValid = 26;
    if (has_mission3_isvalid()) {
      total_size += 2 + 1;
    }
    
    // optional bool mission3_isAttacker = 27;
    if (has_mission3_isattacker()) {
      total_size += 2 + 1;
    }
    
    // optional float mission3_circularBorde_x = 28;
    if (has_mission3_circularborde_x()) {
      total_size += 2 + 4;
    }
    
    // optional float mission3_circularBorde_y = 29;
    if (has_mission3_circularborde_y()) {
      total_size += 2 + 4;
    }
    
    // optional float mission3_goal1_x = 30;
    if (has_mission3_goal1_x()) {
      total_size += 2 + 4;
    }
    
    // optional float mission3_goal1_y = 31;
    if (has_mission3_goal1_y()) {
      total_size += 2 + 4;
    }
    
    // optional float mission3_goal2_x = 32;
    if (has_mission3_goal2_x()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional float mission3_goal2_y = 33;
    if (has_mission3_goal2_y()) {
      total_size += 2 + 4;
    }
    
  }
  // repeated .outputPacket.shape shapes = 10;
  total_size += 1 * this->shapes_size();
  for (int i = 0; i < this->shapes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shapes(i));
  }
  
  // repeated .outputPacket.line mission2_lines = 25;
  total_size += 2 * this->mission2_lines_size();
  for (int i = 0; i < this->mission2_lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission2_lines(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void outputPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const outputPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const outputPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void outputPacket::MergeFrom(const outputPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  shapes_.MergeFrom(from.shapes_);
  mission2_lines_.MergeFrom(from.mission2_lines_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission()) {
      set_mission(from.mission());
    }
    if (from.has_numberofshape()) {
      set_numberofshape(from.numberofshape());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_our_robot_position_x()) {
      set_our_robot_position_x(from.our_robot_position_x());
    }
    if (from.has_our_robot_position_y()) {
      set_our_robot_position_y(from.our_robot_position_y());
    }
    if (from.has_our_robot_angle()) {
      set_our_robot_angle(from.our_robot_angle());
    }
    if (from.has_opp_robot_position_x()) {
      set_opp_robot_position_x(from.opp_robot_position_x());
    }
    if (from.has_opp_robot_position_y()) {
      set_opp_robot_position_y(from.opp_robot_position_y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_opp_robot_angle()) {
      set_opp_robot_angle(from.opp_robot_angle());
    }
    if (from.has_mission1_isvalid()) {
      set_mission1_isvalid(from.mission1_isvalid());
    }
    if (from.has_mission1_region1_tl_x()) {
      set_mission1_region1_tl_x(from.mission1_region1_tl_x());
    }
    if (from.has_mission1_region1_tl_y()) {
      set_mission1_region1_tl_y(from.mission1_region1_tl_y());
    }
    if (from.has_mission1_region1_br_x()) {
      set_mission1_region1_br_x(from.mission1_region1_br_x());
    }
    if (from.has_mission1_region1_br_y()) {
      set_mission1_region1_br_y(from.mission1_region1_br_y());
    }
    if (from.has_mission1_region2_tl_x()) {
      set_mission1_region2_tl_x(from.mission1_region2_tl_x());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mission1_region2_tl_y()) {
      set_mission1_region2_tl_y(from.mission1_region2_tl_y());
    }
    if (from.has_mission1_region2_br_x()) {
      set_mission1_region2_br_x(from.mission1_region2_br_x());
    }
    if (from.has_mission1_region2_br_y()) {
      set_mission1_region2_br_y(from.mission1_region2_br_y());
    }
    if (from.has_mission1_end_x()) {
      set_mission1_end_x(from.mission1_end_x());
    }
    if (from.has_mission1_end_y()) {
      set_mission1_end_y(from.mission1_end_y());
    }
    if (from.has_mission2_isvalid()) {
      set_mission2_isvalid(from.mission2_isvalid());
    }
    if (from.has_mission2_end_x()) {
      set_mission2_end_x(from.mission2_end_x());
    }
    if (from.has_mission2_end_y()) {
      set_mission2_end_y(from.mission2_end_y());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_mission3_isvalid()) {
      set_mission3_isvalid(from.mission3_isvalid());
    }
    if (from.has_mission3_isattacker()) {
      set_mission3_isattacker(from.mission3_isattacker());
    }
    if (from.has_mission3_circularborde_x()) {
      set_mission3_circularborde_x(from.mission3_circularborde_x());
    }
    if (from.has_mission3_circularborde_y()) {
      set_mission3_circularborde_y(from.mission3_circularborde_y());
    }
    if (from.has_mission3_goal1_x()) {
      set_mission3_goal1_x(from.mission3_goal1_x());
    }
    if (from.has_mission3_goal1_y()) {
      set_mission3_goal1_y(from.mission3_goal1_y());
    }
    if (from.has_mission3_goal2_x()) {
      set_mission3_goal2_x(from.mission3_goal2_x());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_mission3_goal2_y()) {
      set_mission3_goal2_y(from.mission3_goal2_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void outputPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void outputPacket::CopyFrom(const outputPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool outputPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < shapes_size(); i++) {
    if (!this->shapes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mission2_lines_size(); i++) {
    if (!this->mission2_lines(i).IsInitialized()) return false;
  }
  return true;
}

void outputPacket::Swap(outputPacket* other) {
  if (other != this) {
    std::swap(mission_, other->mission_);
    std::swap(numberofshape_, other->numberofshape_);
    std::swap(type_, other->type_);
    std::swap(our_robot_position_x_, other->our_robot_position_x_);
    std::swap(our_robot_position_y_, other->our_robot_position_y_);
    std::swap(our_robot_angle_, other->our_robot_angle_);
    std::swap(opp_robot_position_x_, other->opp_robot_position_x_);
    std::swap(opp_robot_position_y_, other->opp_robot_position_y_);
    std::swap(opp_robot_angle_, other->opp_robot_angle_);
    shapes_.Swap(&other->shapes_);
    std::swap(mission1_isvalid_, other->mission1_isvalid_);
    std::swap(mission1_region1_tl_x_, other->mission1_region1_tl_x_);
    std::swap(mission1_region1_tl_y_, other->mission1_region1_tl_y_);
    std::swap(mission1_region1_br_x_, other->mission1_region1_br_x_);
    std::swap(mission1_region1_br_y_, other->mission1_region1_br_y_);
    std::swap(mission1_region2_tl_x_, other->mission1_region2_tl_x_);
    std::swap(mission1_region2_tl_y_, other->mission1_region2_tl_y_);
    std::swap(mission1_region2_br_x_, other->mission1_region2_br_x_);
    std::swap(mission1_region2_br_y_, other->mission1_region2_br_y_);
    std::swap(mission1_end_x_, other->mission1_end_x_);
    std::swap(mission1_end_y_, other->mission1_end_y_);
    std::swap(mission2_isvalid_, other->mission2_isvalid_);
    std::swap(mission2_end_x_, other->mission2_end_x_);
    std::swap(mission2_end_y_, other->mission2_end_y_);
    mission2_lines_.Swap(&other->mission2_lines_);
    std::swap(mission3_isvalid_, other->mission3_isvalid_);
    std::swap(mission3_isattacker_, other->mission3_isattacker_);
    std::swap(mission3_circularborde_x_, other->mission3_circularborde_x_);
    std::swap(mission3_circularborde_y_, other->mission3_circularborde_y_);
    std::swap(mission3_goal1_x_, other->mission3_goal1_x_);
    std::swap(mission3_goal1_y_, other->mission3_goal1_y_);
    std::swap(mission3_goal2_x_, other->mission3_goal2_x_);
    std::swap(mission3_goal2_y_, other->mission3_goal2_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata outputPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = outputPacket_descriptor_;
  metadata.reflection = outputPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
